# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

import _libBornAgainCore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _libBornAgainCore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainCore.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libBornAgainCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libBornAgainCore:
_libBornAgainCore.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _libBornAgainCore.SHARED_PTR_DISOWN


import warnings
def deprecated(message):
  def deprecated_decorator(func):
      def deprecated_func(*args, **kwargs):
          warnings.simplefilter('always', DeprecationWarning)  # turn off filter
          warnings.warn("{} is a deprecated function. {}".format(func.__name__, message),
                        category=DeprecationWarning,
                        stacklevel=2)
          warnings.simplefilter('default', DeprecationWarning)  # reset filter
          return func(*args, **kwargs)
      return deprecated_func
  return deprecated_decorator

class vdouble1d_t(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vdouble1d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vdouble1d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t___bool__(self)

    def __len__(self):
        r"""__len__(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble1d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vdouble1d_t v)
        """
        return _libBornAgainCore.vdouble1d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _libBornAgainCore.vdouble1d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vdouble1d_t self, std::vector< double >::difference_type i)
        __delitem__(vdouble1d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vdouble1d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vdouble1d_t self, PySliceObject * slice) -> vdouble1d_t
        __getitem__(vdouble1d_t self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _libBornAgainCore.vdouble1d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vdouble1d_t self, PySliceObject * slice, vdouble1d_t v)
        __setitem__(vdouble1d_t self, PySliceObject * slice)
        __setitem__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vdouble1d_t self) -> std::vector< double >::value_type"""
        return _libBornAgainCore.vdouble1d_t_pop(self)

    def append(self, x):
        r"""append(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_append(self, x)

    def empty(self):
        r"""empty(vdouble1d_t self) -> bool"""
        return _libBornAgainCore.vdouble1d_t_empty(self)

    def size(self):
        r"""size(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t_size(self)

    def swap(self, v):
        r"""swap(vdouble1d_t self, vdouble1d_t v)"""
        return _libBornAgainCore.vdouble1d_t_swap(self, v)

    def begin(self):
        r"""begin(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainCore.vdouble1d_t_begin(self)

    def end(self):
        r"""end(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainCore.vdouble1d_t_end(self)

    def rbegin(self):
        r"""rbegin(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainCore.vdouble1d_t_rbegin(self)

    def rend(self):
        r"""rend(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainCore.vdouble1d_t_rend(self)

    def clear(self):
        r"""clear(vdouble1d_t self)"""
        return _libBornAgainCore.vdouble1d_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vdouble1d_t self) -> std::vector< double >::allocator_type"""
        return _libBornAgainCore.vdouble1d_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vdouble1d_t self)"""
        return _libBornAgainCore.vdouble1d_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vdouble1d_t self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vdouble1d_t self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _libBornAgainCore.vdouble1d_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vdouble1d_t self) -> vdouble1d_t
        __init__(vdouble1d_t self, vdouble1d_t other) -> vdouble1d_t
        __init__(vdouble1d_t self, std::vector< double >::size_type size) -> vdouble1d_t
        __init__(vdouble1d_t self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vdouble1d_t
        """
        _libBornAgainCore.vdouble1d_t_swiginit(self, _libBornAgainCore.new_vdouble1d_t(*args))

    def push_back(self, x):
        r"""push_back(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_push_back(self, x)

    def front(self):
        r"""front(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainCore.vdouble1d_t_front(self)

    def back(self):
        r"""back(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainCore.vdouble1d_t_back(self)

    def assign(self, n, x):
        r"""assign(vdouble1d_t self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _libBornAgainCore.vdouble1d_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vdouble1d_t self, std::vector< double >::size_type new_size)
        resize(vdouble1d_t self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _libBornAgainCore.vdouble1d_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vdouble1d_t self, std::vector< double >::size_type n)"""
        return _libBornAgainCore.vdouble1d_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainCore.vdouble1d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vdouble1d_t

# Register vdouble1d_t in _libBornAgainCore:
_libBornAgainCore.vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vdouble2d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vdouble2d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t___bool__(self)

    def __len__(self):
        r"""__len__(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vdouble2d_t"""
        return _libBornAgainCore.vdouble2d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vdouble2d_t v)
        """
        return _libBornAgainCore.vdouble2d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _libBornAgainCore.vdouble2d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vdouble2d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vdouble2d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vdouble2d_t self, PySliceObject * slice) -> vdouble2d_t
        __getitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i) -> vdouble1d_t
        """
        return _libBornAgainCore.vdouble2d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vdouble2d_t self, PySliceObject * slice, vdouble2d_t v)
        __setitem__(vdouble2d_t self, PySliceObject * slice)
        __setitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_pop(self)

    def append(self, x):
        r"""append(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_append(self, x)

    def empty(self):
        r"""empty(vdouble2d_t self) -> bool"""
        return _libBornAgainCore.vdouble2d_t_empty(self)

    def size(self):
        r"""size(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t_size(self)

    def swap(self, v):
        r"""swap(vdouble2d_t self, vdouble2d_t v)"""
        return _libBornAgainCore.vdouble2d_t_swap(self, v)

    def begin(self):
        r"""begin(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainCore.vdouble2d_t_begin(self)

    def end(self):
        r"""end(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainCore.vdouble2d_t_end(self)

    def rbegin(self):
        r"""rbegin(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainCore.vdouble2d_t_rbegin(self)

    def rend(self):
        r"""rend(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainCore.vdouble2d_t_rend(self)

    def clear(self):
        r"""clear(vdouble2d_t self)"""
        return _libBornAgainCore.vdouble2d_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vdouble2d_t self) -> std::vector< std::vector< double > >::allocator_type"""
        return _libBornAgainCore.vdouble2d_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vdouble2d_t self)"""
        return _libBornAgainCore.vdouble2d_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _libBornAgainCore.vdouble2d_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vdouble2d_t self) -> vdouble2d_t
        __init__(vdouble2d_t self, vdouble2d_t other) -> vdouble2d_t
        __init__(vdouble2d_t self, std::vector< std::vector< double > >::size_type size) -> vdouble2d_t
        __init__(vdouble2d_t self, std::vector< std::vector< double > >::size_type size, vdouble1d_t value) -> vdouble2d_t
        """
        _libBornAgainCore.vdouble2d_t_swiginit(self, _libBornAgainCore.new_vdouble2d_t(*args))

    def push_back(self, x):
        r"""push_back(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_push_back(self, x)

    def front(self):
        r"""front(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_front(self)

    def back(self):
        r"""back(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainCore.vdouble2d_t_back(self)

    def assign(self, n, x):
        r"""assign(vdouble2d_t self, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)"""
        return _libBornAgainCore.vdouble2d_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size)
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, vdouble1d_t x) -> std::vector< std::vector< double > >::iterator
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)
        """
        return _libBornAgainCore.vdouble2d_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vdouble2d_t self, std::vector< std::vector< double > >::size_type n)"""
        return _libBornAgainCore.vdouble2d_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainCore.vdouble2d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vdouble2d_t

# Register vdouble2d_t in _libBornAgainCore:
_libBornAgainCore.vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_integer_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_integer_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_integer_t"""
        return _libBornAgainCore.vector_integer_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_integer_t v)
        """
        return _libBornAgainCore.vector_integer_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _libBornAgainCore.vector_integer_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_integer_t self, std::vector< int >::difference_type i)
        __delitem__(vector_integer_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_integer_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_integer_t self, PySliceObject * slice) -> vector_integer_t
        __getitem__(vector_integer_t self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _libBornAgainCore.vector_integer_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_integer_t self, PySliceObject * slice, vector_integer_t v)
        __setitem__(vector_integer_t self, PySliceObject * slice)
        __setitem__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_integer_t self) -> std::vector< int >::value_type"""
        return _libBornAgainCore.vector_integer_t_pop(self)

    def append(self, x):
        r"""append(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_append(self, x)

    def empty(self):
        r"""empty(vector_integer_t self) -> bool"""
        return _libBornAgainCore.vector_integer_t_empty(self)

    def size(self):
        r"""size(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t_size(self)

    def swap(self, v):
        r"""swap(vector_integer_t self, vector_integer_t v)"""
        return _libBornAgainCore.vector_integer_t_swap(self, v)

    def begin(self):
        r"""begin(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainCore.vector_integer_t_begin(self)

    def end(self):
        r"""end(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainCore.vector_integer_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainCore.vector_integer_t_rbegin(self)

    def rend(self):
        r"""rend(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainCore.vector_integer_t_rend(self)

    def clear(self):
        r"""clear(vector_integer_t self)"""
        return _libBornAgainCore.vector_integer_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_integer_t self) -> std::vector< int >::allocator_type"""
        return _libBornAgainCore.vector_integer_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_integer_t self)"""
        return _libBornAgainCore.vector_integer_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_integer_t self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_integer_t self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _libBornAgainCore.vector_integer_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_integer_t self) -> vector_integer_t
        __init__(vector_integer_t self, vector_integer_t other) -> vector_integer_t
        __init__(vector_integer_t self, std::vector< int >::size_type size) -> vector_integer_t
        __init__(vector_integer_t self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_integer_t
        """
        _libBornAgainCore.vector_integer_t_swiginit(self, _libBornAgainCore.new_vector_integer_t(*args))

    def push_back(self, x):
        r"""push_back(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_push_back(self, x)

    def front(self):
        r"""front(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainCore.vector_integer_t_front(self)

    def back(self):
        r"""back(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainCore.vector_integer_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_integer_t self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _libBornAgainCore.vector_integer_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_integer_t self, std::vector< int >::size_type new_size)
        resize(vector_integer_t self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _libBornAgainCore.vector_integer_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_integer_t self, std::vector< int >::size_type n)"""
        return _libBornAgainCore.vector_integer_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainCore.vector_integer_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_integer_t

# Register vector_integer_t in _libBornAgainCore:
_libBornAgainCore.vector_integer_t_swigregister(vector_integer_t)

class vinteger2d_t(object):
    r"""Proxy of C++ std::vector< std::vector< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vinteger2d_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vinteger2d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t___bool__(self)

    def __len__(self):
        r"""__len__(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vinteger2d_t"""
        return _libBornAgainCore.vinteger2d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        __setslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, vinteger2d_t v)
        """
        return _libBornAgainCore.vinteger2d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _libBornAgainCore.vinteger2d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(vinteger2d_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vinteger2d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vinteger2d_t self, PySliceObject * slice) -> vinteger2d_t
        __getitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i) -> vector_integer_t
        """
        return _libBornAgainCore.vinteger2d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vinteger2d_t self, PySliceObject * slice, vinteger2d_t v)
        __setitem__(vinteger2d_t self, PySliceObject * slice)
        __setitem__(vinteger2d_t self, std::vector< std::vector< int > >::difference_type i, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_pop(self)

    def append(self, x):
        r"""append(vinteger2d_t self, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_append(self, x)

    def empty(self):
        r"""empty(vinteger2d_t self) -> bool"""
        return _libBornAgainCore.vinteger2d_t_empty(self)

    def size(self):
        r"""size(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t_size(self)

    def swap(self, v):
        r"""swap(vinteger2d_t self, vinteger2d_t v)"""
        return _libBornAgainCore.vinteger2d_t_swap(self, v)

    def begin(self):
        r"""begin(vinteger2d_t self) -> std::vector< std::vector< int > >::iterator"""
        return _libBornAgainCore.vinteger2d_t_begin(self)

    def end(self):
        r"""end(vinteger2d_t self) -> std::vector< std::vector< int > >::iterator"""
        return _libBornAgainCore.vinteger2d_t_end(self)

    def rbegin(self):
        r"""rbegin(vinteger2d_t self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _libBornAgainCore.vinteger2d_t_rbegin(self)

    def rend(self):
        r"""rend(vinteger2d_t self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _libBornAgainCore.vinteger2d_t_rend(self)

    def clear(self):
        r"""clear(vinteger2d_t self)"""
        return _libBornAgainCore.vinteger2d_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vinteger2d_t self) -> std::vector< std::vector< int > >::allocator_type"""
        return _libBornAgainCore.vinteger2d_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vinteger2d_t self)"""
        return _libBornAgainCore.vinteger2d_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(vinteger2d_t self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _libBornAgainCore.vinteger2d_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vinteger2d_t self) -> vinteger2d_t
        __init__(vinteger2d_t self, vinteger2d_t other) -> vinteger2d_t
        __init__(vinteger2d_t self, std::vector< std::vector< int > >::size_type size) -> vinteger2d_t
        __init__(vinteger2d_t self, std::vector< std::vector< int > >::size_type size, vector_integer_t value) -> vinteger2d_t
        """
        _libBornAgainCore.vinteger2d_t_swiginit(self, _libBornAgainCore.new_vinteger2d_t(*args))

    def push_back(self, x):
        r"""push_back(vinteger2d_t self, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_push_back(self, x)

    def front(self):
        r"""front(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_front(self)

    def back(self):
        r"""back(vinteger2d_t self) -> vector_integer_t"""
        return _libBornAgainCore.vinteger2d_t_back(self)

    def assign(self, n, x):
        r"""assign(vinteger2d_t self, std::vector< std::vector< int > >::size_type n, vector_integer_t x)"""
        return _libBornAgainCore.vinteger2d_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vinteger2d_t self, std::vector< std::vector< int > >::size_type new_size)
        resize(vinteger2d_t self, std::vector< std::vector< int > >::size_type new_size, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos, vector_integer_t x) -> std::vector< std::vector< int > >::iterator
        insert(vinteger2d_t self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, vector_integer_t x)
        """
        return _libBornAgainCore.vinteger2d_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vinteger2d_t self, std::vector< std::vector< int > >::size_type n)"""
        return _libBornAgainCore.vinteger2d_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vinteger2d_t self) -> std::vector< std::vector< int > >::size_type"""
        return _libBornAgainCore.vinteger2d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vinteger2d_t

# Register vinteger2d_t in _libBornAgainCore:
_libBornAgainCore.vinteger2d_t_swigregister(vinteger2d_t)

class vector_longinteger_t(object):
    r"""Proxy of C++ std::vector< unsigned long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_longinteger_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_longinteger_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vector_longinteger_t"""
        return _libBornAgainCore.vector_longinteger_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vector_longinteger_t v)
        """
        return _libBornAgainCore.vector_longinteger_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"""
        return _libBornAgainCore.vector_longinteger_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i)
        __delitem__(vector_longinteger_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_longinteger_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_longinteger_t self, PySliceObject * slice) -> vector_longinteger_t
        __getitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &
        """
        return _libBornAgainCore.vector_longinteger_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_longinteger_t self, PySliceObject * slice, vector_longinteger_t v)
        __setitem__(vector_longinteger_t self, PySliceObject * slice)
        __setitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_longinteger_t self) -> std::vector< unsigned long >::value_type"""
        return _libBornAgainCore.vector_longinteger_t_pop(self)

    def append(self, x):
        r"""append(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_append(self, x)

    def empty(self):
        r"""empty(vector_longinteger_t self) -> bool"""
        return _libBornAgainCore.vector_longinteger_t_empty(self)

    def size(self):
        r"""size(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t_size(self)

    def swap(self, v):
        r"""swap(vector_longinteger_t self, vector_longinteger_t v)"""
        return _libBornAgainCore.vector_longinteger_t_swap(self, v)

    def begin(self):
        r"""begin(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainCore.vector_longinteger_t_begin(self)

    def end(self):
        r"""end(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainCore.vector_longinteger_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainCore.vector_longinteger_t_rbegin(self)

    def rend(self):
        r"""rend(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainCore.vector_longinteger_t_rend(self)

    def clear(self):
        r"""clear(vector_longinteger_t self)"""
        return _libBornAgainCore.vector_longinteger_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_longinteger_t self) -> std::vector< unsigned long >::allocator_type"""
        return _libBornAgainCore.vector_longinteger_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_longinteger_t self)"""
        return _libBornAgainCore.vector_longinteger_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator
        """
        return _libBornAgainCore.vector_longinteger_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_longinteger_t self) -> vector_longinteger_t
        __init__(vector_longinteger_t self, vector_longinteger_t other) -> vector_longinteger_t
        __init__(vector_longinteger_t self, std::vector< unsigned long >::size_type size) -> vector_longinteger_t
        __init__(vector_longinteger_t self, std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vector_longinteger_t
        """
        _libBornAgainCore.vector_longinteger_t_swiginit(self, _libBornAgainCore.new_vector_longinteger_t(*args))

    def push_back(self, x):
        r"""push_back(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_push_back(self, x)

    def front(self):
        r"""front(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainCore.vector_longinteger_t_front(self)

    def back(self):
        r"""back(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainCore.vector_longinteger_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_longinteger_t self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainCore.vector_longinteger_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size)
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainCore.vector_longinteger_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_longinteger_t self, std::vector< unsigned long >::size_type n)"""
        return _libBornAgainCore.vector_longinteger_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainCore.vector_longinteger_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_longinteger_t

# Register vector_longinteger_t in _libBornAgainCore:
_libBornAgainCore.vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(object):
    r"""Proxy of C++ std::vector< std::complex< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_complex_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_complex_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j) -> vector_complex_t"""
        return _libBornAgainCore.vector_complex_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j, vector_complex_t v)
        """
        return _libBornAgainCore.vector_complex_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)"""
        return _libBornAgainCore.vector_complex_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i)
        __delitem__(vector_complex_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_complex_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_complex_t self, PySliceObject * slice) -> vector_complex_t
        __getitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &
        """
        return _libBornAgainCore.vector_complex_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_complex_t self, PySliceObject * slice, vector_complex_t v)
        __setitem__(vector_complex_t self, PySliceObject * slice)
        __setitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_complex_t self) -> std::vector< std::complex< double > >::value_type"""
        return _libBornAgainCore.vector_complex_t_pop(self)

    def append(self, x):
        r"""append(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_append(self, x)

    def empty(self):
        r"""empty(vector_complex_t self) -> bool"""
        return _libBornAgainCore.vector_complex_t_empty(self)

    def size(self):
        r"""size(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t_size(self)

    def swap(self, v):
        r"""swap(vector_complex_t self, vector_complex_t v)"""
        return _libBornAgainCore.vector_complex_t_swap(self, v)

    def begin(self):
        r"""begin(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainCore.vector_complex_t_begin(self)

    def end(self):
        r"""end(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainCore.vector_complex_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_complex_t_rbegin(self)

    def rend(self):
        r"""rend(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_complex_t_rend(self)

    def clear(self):
        r"""clear(vector_complex_t self)"""
        return _libBornAgainCore.vector_complex_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_complex_t self) -> std::vector< std::complex< double > >::allocator_type"""
        return _libBornAgainCore.vector_complex_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_complex_t self)"""
        return _libBornAgainCore.vector_complex_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator
        """
        return _libBornAgainCore.vector_complex_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_complex_t self) -> vector_complex_t
        __init__(vector_complex_t self, vector_complex_t other) -> vector_complex_t
        __init__(vector_complex_t self, std::vector< std::complex< double > >::size_type size) -> vector_complex_t
        __init__(vector_complex_t self, std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> vector_complex_t
        """
        _libBornAgainCore.vector_complex_t_swiginit(self, _libBornAgainCore.new_vector_complex_t(*args))

    def push_back(self, x):
        r"""push_back(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_push_back(self, x)

    def front(self):
        r"""front(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainCore.vector_complex_t_front(self)

    def back(self):
        r"""back(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainCore.vector_complex_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_complex_t self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainCore.vector_complex_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size)
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainCore.vector_complex_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_complex_t self, std::vector< std::complex< double > >::size_type n)"""
        return _libBornAgainCore.vector_complex_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainCore.vector_complex_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_complex_t

# Register vector_complex_t in _libBornAgainCore:
_libBornAgainCore.vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_string_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_string_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string_t"""
        return _libBornAgainCore.vector_string_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string_t v)
        """
        return _libBornAgainCore.vector_string_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _libBornAgainCore.vector_string_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_string_t self, std::vector< std::string >::difference_type i)
        __delitem__(vector_string_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_string_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_string_t self, PySliceObject * slice) -> vector_string_t
        __getitem__(vector_string_t self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _libBornAgainCore.vector_string_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_string_t self, PySliceObject * slice, vector_string_t v)
        __setitem__(vector_string_t self, PySliceObject * slice)
        __setitem__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_string_t self) -> std::vector< std::string >::value_type"""
        return _libBornAgainCore.vector_string_t_pop(self)

    def append(self, x):
        r"""append(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_append(self, x)

    def empty(self):
        r"""empty(vector_string_t self) -> bool"""
        return _libBornAgainCore.vector_string_t_empty(self)

    def size(self):
        r"""size(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t_size(self)

    def swap(self, v):
        r"""swap(vector_string_t self, vector_string_t v)"""
        return _libBornAgainCore.vector_string_t_swap(self, v)

    def begin(self):
        r"""begin(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainCore.vector_string_t_begin(self)

    def end(self):
        r"""end(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainCore.vector_string_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainCore.vector_string_t_rbegin(self)

    def rend(self):
        r"""rend(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainCore.vector_string_t_rend(self)

    def clear(self):
        r"""clear(vector_string_t self)"""
        return _libBornAgainCore.vector_string_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_string_t self) -> std::vector< std::string >::allocator_type"""
        return _libBornAgainCore.vector_string_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_string_t self)"""
        return _libBornAgainCore.vector_string_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_string_t self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vector_string_t self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _libBornAgainCore.vector_string_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_string_t self) -> vector_string_t
        __init__(vector_string_t self, vector_string_t other) -> vector_string_t
        __init__(vector_string_t self, std::vector< std::string >::size_type size) -> vector_string_t
        __init__(vector_string_t self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string_t
        """
        _libBornAgainCore.vector_string_t_swiginit(self, _libBornAgainCore.new_vector_string_t(*args))

    def push_back(self, x):
        r"""push_back(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_push_back(self, x)

    def front(self):
        r"""front(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainCore.vector_string_t_front(self)

    def back(self):
        r"""back(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainCore.vector_string_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_string_t self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainCore.vector_string_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_string_t self, std::vector< std::string >::size_type new_size)
        resize(vector_string_t self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainCore.vector_string_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_string_t self, std::vector< std::string >::size_type n)"""
        return _libBornAgainCore.vector_string_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainCore.vector_string_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_string_t

# Register vector_string_t in _libBornAgainCore:
_libBornAgainCore.vector_string_t_swigregister(vector_string_t)

class map_string_double_t(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_string_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.map_string_double_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_string_double_t self) -> bool"""
        return _libBornAgainCore.map_string_double_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_string_double_t self) -> bool"""
        return _libBornAgainCore.map_string_double_t___bool__(self)

    def __len__(self):
        r"""__len__(map_string_double_t self) -> std::map< std::string,double >::size_type"""
        return _libBornAgainCore.map_string_double_t___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &"""
        return _libBornAgainCore.map_string_double_t___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key)"""
        return _libBornAgainCore.map_string_double_t___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(map_string_double_t self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _libBornAgainCore.map_string_double_t_has_key(self, key)

    def keys(self):
        r"""keys(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_keys(self)

    def values(self):
        r"""values(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_values(self)

    def items(self):
        r"""items(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_items(self)

    def __contains__(self, key):
        r"""__contains__(map_string_double_t self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _libBornAgainCore.map_string_double_t___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_string_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.map_string_double_t_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_string_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.map_string_double_t_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key)
        __setitem__(map_string_double_t self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)
        """
        return _libBornAgainCore.map_string_double_t___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_string_double_t self) -> PyObject *"""
        return _libBornAgainCore.map_string_double_t_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_string_double_t self, std::less< std::string > const & other) -> map_string_double_t
        __init__(map_string_double_t self) -> map_string_double_t
        __init__(map_string_double_t self, map_string_double_t other) -> map_string_double_t
        """
        _libBornAgainCore.map_string_double_t_swiginit(self, _libBornAgainCore.new_map_string_double_t(*args))

    def empty(self):
        r"""empty(map_string_double_t self) -> bool"""
        return _libBornAgainCore.map_string_double_t_empty(self)

    def size(self):
        r"""size(map_string_double_t self) -> std::map< std::string,double >::size_type"""
        return _libBornAgainCore.map_string_double_t_size(self)

    def swap(self, v):
        r"""swap(map_string_double_t self, map_string_double_t v)"""
        return _libBornAgainCore.map_string_double_t_swap(self, v)

    def begin(self):
        r"""begin(map_string_double_t self) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_begin(self)

    def end(self):
        r"""end(map_string_double_t self) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_end(self)

    def rbegin(self):
        r"""rbegin(map_string_double_t self) -> std::map< std::string,double >::reverse_iterator"""
        return _libBornAgainCore.map_string_double_t_rbegin(self)

    def rend(self):
        r"""rend(map_string_double_t self) -> std::map< std::string,double >::reverse_iterator"""
        return _libBornAgainCore.map_string_double_t_rend(self)

    def clear(self):
        r"""clear(map_string_double_t self)"""
        return _libBornAgainCore.map_string_double_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_string_double_t self) -> std::map< std::string,double >::allocator_type"""
        return _libBornAgainCore.map_string_double_t_get_allocator(self)

    def count(self, x):
        r"""count(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type"""
        return _libBornAgainCore.map_string_double_t_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type
        erase(map_string_double_t self, std::map< std::string,double >::iterator position)
        erase(map_string_double_t self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)
        """
        return _libBornAgainCore.map_string_double_t_erase(self, *args)

    def find(self, x):
        r"""find(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(map_string_double_t self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _libBornAgainCore.map_string_double_t_upper_bound(self, x)
    __swig_destroy__ = _libBornAgainCore.delete_map_string_double_t

# Register map_string_double_t in _libBornAgainCore:
_libBornAgainCore.map_string_double_t_swigregister(map_string_double_t)

class pvacuum_double_t(object):
    r"""Proxy of C++ std::pair< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pvacuum_double_t self) -> pvacuum_double_t
        __init__(pvacuum_double_t self, double first, double second) -> pvacuum_double_t
        __init__(pvacuum_double_t self, pvacuum_double_t other) -> pvacuum_double_t
        """
        _libBornAgainCore.pvacuum_double_t_swiginit(self, _libBornAgainCore.new_pvacuum_double_t(*args))
    first = property(_libBornAgainCore.pvacuum_double_t_first_get, _libBornAgainCore.pvacuum_double_t_first_set, doc=r"""first : double""")
    second = property(_libBornAgainCore.pvacuum_double_t_second_get, _libBornAgainCore.pvacuum_double_t_second_set, doc=r"""second : double""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libBornAgainCore.delete_pvacuum_double_t

# Register pvacuum_double_t in _libBornAgainCore:
_libBornAgainCore.pvacuum_double_t_swigregister(pvacuum_double_t)

class vector_pvacuum_double_t(object):
    r"""Proxy of C++ std::vector< std::pair< double,double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_pvacuum_double_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_pvacuum_double_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_pvacuum_double_t self) -> bool"""
        return _libBornAgainCore.vector_pvacuum_double_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_pvacuum_double_t self) -> bool"""
        return _libBornAgainCore.vector_pvacuum_double_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::size_type"""
        return _libBornAgainCore.vector_pvacuum_double_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j) -> vector_pvacuum_double_t"""
        return _libBornAgainCore.vector_pvacuum_double_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j)
        __setslice__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j, vector_pvacuum_double_t v)
        """
        return _libBornAgainCore.vector_pvacuum_double_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i, std::vector< std::pair< double,double > >::difference_type j)"""
        return _libBornAgainCore.vector_pvacuum_double_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i)
        __delitem__(vector_pvacuum_double_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_pvacuum_double_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_pvacuum_double_t self, PySliceObject * slice) -> vector_pvacuum_double_t
        __getitem__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i) -> pvacuum_double_t
        """
        return _libBornAgainCore.vector_pvacuum_double_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_pvacuum_double_t self, PySliceObject * slice, vector_pvacuum_double_t v)
        __setitem__(vector_pvacuum_double_t self, PySliceObject * slice)
        __setitem__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::difference_type i, pvacuum_double_t x)
        """
        return _libBornAgainCore.vector_pvacuum_double_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_pvacuum_double_t self) -> pvacuum_double_t"""
        return _libBornAgainCore.vector_pvacuum_double_t_pop(self)

    def append(self, x):
        r"""append(vector_pvacuum_double_t self, pvacuum_double_t x)"""
        return _libBornAgainCore.vector_pvacuum_double_t_append(self, x)

    def empty(self):
        r"""empty(vector_pvacuum_double_t self) -> bool"""
        return _libBornAgainCore.vector_pvacuum_double_t_empty(self)

    def size(self):
        r"""size(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::size_type"""
        return _libBornAgainCore.vector_pvacuum_double_t_size(self)

    def swap(self, v):
        r"""swap(vector_pvacuum_double_t self, vector_pvacuum_double_t v)"""
        return _libBornAgainCore.vector_pvacuum_double_t_swap(self, v)

    def begin(self):
        r"""begin(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::iterator"""
        return _libBornAgainCore.vector_pvacuum_double_t_begin(self)

    def end(self):
        r"""end(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::iterator"""
        return _libBornAgainCore.vector_pvacuum_double_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::reverse_iterator"""
        return _libBornAgainCore.vector_pvacuum_double_t_rbegin(self)

    def rend(self):
        r"""rend(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::reverse_iterator"""
        return _libBornAgainCore.vector_pvacuum_double_t_rend(self)

    def clear(self):
        r"""clear(vector_pvacuum_double_t self)"""
        return _libBornAgainCore.vector_pvacuum_double_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::allocator_type"""
        return _libBornAgainCore.vector_pvacuum_double_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_pvacuum_double_t self)"""
        return _libBornAgainCore.vector_pvacuum_double_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::iterator pos) -> std::vector< std::pair< double,double > >::iterator
        erase(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::iterator first, std::vector< std::pair< double,double > >::iterator last) -> std::vector< std::pair< double,double > >::iterator
        """
        return _libBornAgainCore.vector_pvacuum_double_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_pvacuum_double_t self) -> vector_pvacuum_double_t
        __init__(vector_pvacuum_double_t self, vector_pvacuum_double_t other) -> vector_pvacuum_double_t
        __init__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::size_type size) -> vector_pvacuum_double_t
        __init__(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::size_type size, pvacuum_double_t value) -> vector_pvacuum_double_t
        """
        _libBornAgainCore.vector_pvacuum_double_t_swiginit(self, _libBornAgainCore.new_vector_pvacuum_double_t(*args))

    def push_back(self, x):
        r"""push_back(vector_pvacuum_double_t self, pvacuum_double_t x)"""
        return _libBornAgainCore.vector_pvacuum_double_t_push_back(self, x)

    def front(self):
        r"""front(vector_pvacuum_double_t self) -> pvacuum_double_t"""
        return _libBornAgainCore.vector_pvacuum_double_t_front(self)

    def back(self):
        r"""back(vector_pvacuum_double_t self) -> pvacuum_double_t"""
        return _libBornAgainCore.vector_pvacuum_double_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::size_type n, pvacuum_double_t x)"""
        return _libBornAgainCore.vector_pvacuum_double_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::size_type new_size)
        resize(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::size_type new_size, pvacuum_double_t x)
        """
        return _libBornAgainCore.vector_pvacuum_double_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::iterator pos, pvacuum_double_t x) -> std::vector< std::pair< double,double > >::iterator
        insert(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::iterator pos, std::vector< std::pair< double,double > >::size_type n, pvacuum_double_t x)
        """
        return _libBornAgainCore.vector_pvacuum_double_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_pvacuum_double_t self, std::vector< std::pair< double,double > >::size_type n)"""
        return _libBornAgainCore.vector_pvacuum_double_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_pvacuum_double_t self) -> std::vector< std::pair< double,double > >::size_type"""
        return _libBornAgainCore.vector_pvacuum_double_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_pvacuum_double_t

# Register vector_pvacuum_double_t in _libBornAgainCore:
_libBornAgainCore.vector_pvacuum_double_t_swigregister(vector_pvacuum_double_t)

import libBornAgainFit
import libBornAgainBase
class kvector_t(object):
    r"""Proxy of C++ BasicVector3D< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(kvector_t self) -> kvector_t
        __init__(kvector_t self, double const x1, double const y1, double const z1) -> kvector_t
        """
        _libBornAgainCore.kvector_t_swiginit(self, _libBornAgainCore.new_kvector_t(*args))

    def x(self):
        r"""x(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_x(self)

    def y(self):
        r"""y(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_y(self)

    def z(self):
        r"""z(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_z(self)

    def setX(self, a):
        r"""setX(kvector_t self, double const & a)"""
        return _libBornAgainCore.kvector_t_setX(self, a)

    def setY(self, a):
        r"""setY(kvector_t self, double const & a)"""
        return _libBornAgainCore.kvector_t_setY(self, a)

    def setZ(self, a):
        r"""setZ(kvector_t self, double const & a)"""
        return _libBornAgainCore.kvector_t_setZ(self, a)

    def __iadd__(self, v):
        r"""__iadd__(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t___iadd__(self, v)

    def __isub__(self, v):
        r"""__isub__(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t___isub__(self, v)

    def conj(self):
        r"""conj(kvector_t self) -> kvector_t"""
        return _libBornAgainCore.kvector_t_conj(self)

    def mag2(self):
        r"""mag2(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_mag2(self)

    def mag(self):
        r"""mag(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_mag(self)

    def magxy2(self):
        r"""magxy2(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_magxy2(self)

    def magxy(self):
        r"""magxy(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_magxy(self)

    def phi(self):
        r"""phi(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_phi(self)

    def theta(self):
        r"""theta(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_theta(self)

    def cosTheta(self):
        r"""cosTheta(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_cosTheta(self)

    def sin2Theta(self):
        r"""sin2Theta(kvector_t self) -> double"""
        return _libBornAgainCore.kvector_t_sin2Theta(self)

    def unit(self):
        r"""unit(kvector_t self) -> kvector_t"""
        return _libBornAgainCore.kvector_t_unit(self)

    def complex(self):
        r"""complex(kvector_t self) -> cvector_t"""
        return _libBornAgainCore.kvector_t_complex(self)

    def real(self):
        r"""real(kvector_t self) -> kvector_t"""
        return _libBornAgainCore.kvector_t_real(self)

    def angle(self, v):
        r"""angle(kvector_t self, kvector_t v) -> double"""
        return _libBornAgainCore.kvector_t_angle(self, v)

    def project(self, v):
        r"""project(kvector_t self, kvector_t v) -> kvector_t"""
        return _libBornAgainCore.kvector_t_project(self, v)

    def __add__(self, rhs):
        r"""__add__(kvector_t self, kvector_t rhs) -> kvector_t"""
        return _libBornAgainCore.kvector_t___add__(self, rhs)

    def __mul__(self, c):
        r"""__mul__(kvector_t self, double c) -> kvector_t"""
        return _libBornAgainCore.kvector_t___mul__(self, c)

    def __rmul__(self, c):
        r"""__rmul__(kvector_t self, double c) -> kvector_t"""
        return _libBornAgainCore.kvector_t___rmul__(self, c)

    def __neg__(self):
        r"""__neg__(kvector_t self) -> kvector_t"""
        return _libBornAgainCore.kvector_t___neg__(self)
    __swig_destroy__ = _libBornAgainCore.delete_kvector_t

# Register kvector_t in _libBornAgainCore:
_libBornAgainCore.kvector_t_swigregister(kvector_t)

class vector_kvector_t(object):
    r"""Proxy of C++ std::vector< BasicVector3D< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_kvector_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_kvector_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j) -> vector_kvector_t"""
        return _libBornAgainCore.vector_kvector_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j)
        __setslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j, vector_kvector_t v)
        """
        return _libBornAgainCore.vector_kvector_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, std::vector< BasicVector3D< double > >::difference_type j)"""
        return _libBornAgainCore.vector_kvector_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i)
        __delitem__(vector_kvector_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_kvector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_kvector_t self, PySliceObject * slice) -> vector_kvector_t
        __getitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i) -> kvector_t
        """
        return _libBornAgainCore.vector_kvector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_kvector_t self, PySliceObject * slice, vector_kvector_t v)
        __setitem__(vector_kvector_t self, PySliceObject * slice)
        __setitem__(vector_kvector_t self, std::vector< BasicVector3D< double > >::difference_type i, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_pop(self)

    def append(self, x):
        r"""append(vector_kvector_t self, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_append(self, x)

    def empty(self):
        r"""empty(vector_kvector_t self) -> bool"""
        return _libBornAgainCore.vector_kvector_t_empty(self)

    def size(self):
        r"""size(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t_size(self)

    def swap(self, v):
        r"""swap(vector_kvector_t self, vector_kvector_t v)"""
        return _libBornAgainCore.vector_kvector_t_swap(self, v)

    def begin(self):
        r"""begin(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::iterator"""
        return _libBornAgainCore.vector_kvector_t_begin(self)

    def end(self):
        r"""end(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::iterator"""
        return _libBornAgainCore.vector_kvector_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_kvector_t_rbegin(self)

    def rend(self):
        r"""rend(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::reverse_iterator"""
        return _libBornAgainCore.vector_kvector_t_rend(self)

    def clear(self):
        r"""clear(vector_kvector_t self)"""
        return _libBornAgainCore.vector_kvector_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::allocator_type"""
        return _libBornAgainCore.vector_kvector_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_kvector_t self)"""
        return _libBornAgainCore.vector_kvector_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos) -> std::vector< BasicVector3D< double > >::iterator
        erase(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator first, std::vector< BasicVector3D< double > >::iterator last) -> std::vector< BasicVector3D< double > >::iterator
        """
        return _libBornAgainCore.vector_kvector_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_kvector_t self) -> vector_kvector_t
        __init__(vector_kvector_t self, vector_kvector_t other) -> vector_kvector_t
        __init__(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type size) -> vector_kvector_t
        __init__(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type size, kvector_t value) -> vector_kvector_t
        """
        _libBornAgainCore.vector_kvector_t_swiginit(self, _libBornAgainCore.new_vector_kvector_t(*args))

    def push_back(self, x):
        r"""push_back(vector_kvector_t self, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_push_back(self, x)

    def front(self):
        r"""front(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_front(self)

    def back(self):
        r"""back(vector_kvector_t self) -> kvector_t"""
        return _libBornAgainCore.vector_kvector_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type n, kvector_t x)"""
        return _libBornAgainCore.vector_kvector_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type new_size)
        resize(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type new_size, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos, kvector_t x) -> std::vector< BasicVector3D< double > >::iterator
        insert(vector_kvector_t self, std::vector< BasicVector3D< double > >::iterator pos, std::vector< BasicVector3D< double > >::size_type n, kvector_t x)
        """
        return _libBornAgainCore.vector_kvector_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_kvector_t self, std::vector< BasicVector3D< double > >::size_type n)"""
        return _libBornAgainCore.vector_kvector_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_kvector_t self) -> std::vector< BasicVector3D< double > >::size_type"""
        return _libBornAgainCore.vector_kvector_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_kvector_t

# Register vector_kvector_t in _libBornAgainCore:
_libBornAgainCore.vector_kvector_t_swigregister(vector_kvector_t)

class cvector_t(object):
    r"""Proxy of C++ BasicVector3D< std::complex< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(cvector_t self) -> cvector_t
        __init__(cvector_t self, std::complex< double > const x1, std::complex< double > const y1, std::complex< double > const z1) -> cvector_t
        """
        _libBornAgainCore.cvector_t_swiginit(self, _libBornAgainCore.new_cvector_t(*args))

    def x(self):
        r"""x(cvector_t self) -> std::complex< double >"""
        return _libBornAgainCore.cvector_t_x(self)

    def y(self):
        r"""y(cvector_t self) -> std::complex< double >"""
        return _libBornAgainCore.cvector_t_y(self)

    def z(self):
        r"""z(cvector_t self) -> std::complex< double >"""
        return _libBornAgainCore.cvector_t_z(self)

    def setX(self, a):
        r"""setX(cvector_t self, std::complex< double > const & a)"""
        return _libBornAgainCore.cvector_t_setX(self, a)

    def setY(self, a):
        r"""setY(cvector_t self, std::complex< double > const & a)"""
        return _libBornAgainCore.cvector_t_setY(self, a)

    def setZ(self, a):
        r"""setZ(cvector_t self, std::complex< double > const & a)"""
        return _libBornAgainCore.cvector_t_setZ(self, a)

    def __iadd__(self, v):
        r"""__iadd__(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t___iadd__(self, v)

    def __isub__(self, v):
        r"""__isub__(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t___isub__(self, v)

    def conj(self):
        r"""conj(cvector_t self) -> cvector_t"""
        return _libBornAgainCore.cvector_t_conj(self)

    def mag2(self):
        r"""mag2(cvector_t self) -> double"""
        return _libBornAgainCore.cvector_t_mag2(self)

    def mag(self):
        r"""mag(cvector_t self) -> double"""
        return _libBornAgainCore.cvector_t_mag(self)

    def magxy2(self):
        r"""magxy2(cvector_t self) -> double"""
        return _libBornAgainCore.cvector_t_magxy2(self)

    def magxy(self):
        r"""magxy(cvector_t self) -> double"""
        return _libBornAgainCore.cvector_t_magxy(self)

    def unit(self):
        r"""unit(cvector_t self) -> cvector_t"""
        return _libBornAgainCore.cvector_t_unit(self)

    def real(self):
        r"""real(cvector_t self) -> kvector_t"""
        return _libBornAgainCore.cvector_t_real(self)

    def project(self, v):
        r"""project(cvector_t self, cvector_t v) -> cvector_t"""
        return _libBornAgainCore.cvector_t_project(self, v)
    __swig_destroy__ = _libBornAgainCore.delete_cvector_t

# Register cvector_t in _libBornAgainCore:
_libBornAgainCore.cvector_t_swigregister(cvector_t)

class vector_cvector_t(object):
    r"""Proxy of C++ std::vector< BasicVector3D< std::complex< double > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_cvector_t self) -> SwigPyIterator"""
        return _libBornAgainCore.vector_cvector_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t___bool__(self)

    def __len__(self):
        r"""__len__(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j) -> vector_cvector_t"""
        return _libBornAgainCore.vector_cvector_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j)
        __setslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j, vector_cvector_t v)
        """
        return _libBornAgainCore.vector_cvector_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, std::vector< BasicVector3D< std::complex< double > > >::difference_type j)"""
        return _libBornAgainCore.vector_cvector_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i)
        __delitem__(vector_cvector_t self, PySliceObject * slice)
        """
        return _libBornAgainCore.vector_cvector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_cvector_t self, PySliceObject * slice) -> vector_cvector_t
        __getitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i) -> cvector_t
        """
        return _libBornAgainCore.vector_cvector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_cvector_t self, PySliceObject * slice, vector_cvector_t v)
        __setitem__(vector_cvector_t self, PySliceObject * slice)
        __setitem__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::difference_type i, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_pop(self)

    def append(self, x):
        r"""append(vector_cvector_t self, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_append(self, x)

    def empty(self):
        r"""empty(vector_cvector_t self) -> bool"""
        return _libBornAgainCore.vector_cvector_t_empty(self)

    def size(self):
        r"""size(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t_size(self)

    def swap(self, v):
        r"""swap(vector_cvector_t self, vector_cvector_t v)"""
        return _libBornAgainCore.vector_cvector_t_swap(self, v)

    def begin(self):
        r"""begin(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::iterator"""
        return _libBornAgainCore.vector_cvector_t_begin(self)

    def end(self):
        r"""end(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::iterator"""
        return _libBornAgainCore.vector_cvector_t_end(self)

    def rbegin(self):
        r"""rbegin(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::reverse_iterator"""
        return _libBornAgainCore.vector_cvector_t_rbegin(self)

    def rend(self):
        r"""rend(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::reverse_iterator"""
        return _libBornAgainCore.vector_cvector_t_rend(self)

    def clear(self):
        r"""clear(vector_cvector_t self)"""
        return _libBornAgainCore.vector_cvector_t_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::allocator_type"""
        return _libBornAgainCore.vector_cvector_t_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_cvector_t self)"""
        return _libBornAgainCore.vector_cvector_t_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        erase(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator first, std::vector< BasicVector3D< std::complex< double > > >::iterator last) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        """
        return _libBornAgainCore.vector_cvector_t_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_cvector_t self) -> vector_cvector_t
        __init__(vector_cvector_t self, vector_cvector_t other) -> vector_cvector_t
        __init__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type size) -> vector_cvector_t
        __init__(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type size, cvector_t value) -> vector_cvector_t
        """
        _libBornAgainCore.vector_cvector_t_swiginit(self, _libBornAgainCore.new_vector_cvector_t(*args))

    def push_back(self, x):
        r"""push_back(vector_cvector_t self, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_push_back(self, x)

    def front(self):
        r"""front(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_front(self)

    def back(self):
        r"""back(vector_cvector_t self) -> cvector_t"""
        return _libBornAgainCore.vector_cvector_t_back(self)

    def assign(self, n, x):
        r"""assign(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type n, cvector_t x)"""
        return _libBornAgainCore.vector_cvector_t_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type new_size)
        resize(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type new_size, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos, cvector_t x) -> std::vector< BasicVector3D< std::complex< double > > >::iterator
        insert(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::iterator pos, std::vector< BasicVector3D< std::complex< double > > >::size_type n, cvector_t x)
        """
        return _libBornAgainCore.vector_cvector_t_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_cvector_t self, std::vector< BasicVector3D< std::complex< double > > >::size_type n)"""
        return _libBornAgainCore.vector_cvector_t_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_cvector_t self) -> std::vector< BasicVector3D< std::complex< double > > >::size_type"""
        return _libBornAgainCore.vector_cvector_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_cvector_t

# Register vector_cvector_t in _libBornAgainCore:
_libBornAgainCore.vector_cvector_t_swigregister(vector_cvector_t)

import libBornAgainParam
import libBornAgainSample
class swig_dummy_type_axisinfo_vector(object):
    r"""Proxy of C++ std::vector< AxisInfo > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(swig_dummy_type_axisinfo_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___bool__(self)

    def __len__(self):
        r"""__len__(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j) -> swig_dummy_type_axisinfo_vector"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j)
        __setslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j, swig_dummy_type_axisinfo_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, std::vector< AxisInfo >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i)
        __delitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice) -> swig_dummy_type_axisinfo_vector
        __getitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i) -> AxisInfo
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice, swig_dummy_type_axisinfo_vector v)
        __setitem__(swig_dummy_type_axisinfo_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::difference_type i, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_pop(self)

    def append(self, x):
        r"""append(swig_dummy_type_axisinfo_vector self, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_append(self, x)

    def empty(self):
        r"""empty(swig_dummy_type_axisinfo_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_empty(self)

    def size(self):
        r"""size(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_size(self)

    def swap(self, v):
        r"""swap(swig_dummy_type_axisinfo_vector self, swig_dummy_type_axisinfo_vector v)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_swap(self, v)

    def begin(self):
        r"""begin(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_begin(self)

    def end(self):
        r"""end(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_end(self)

    def rbegin(self):
        r"""rbegin(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_rbegin(self)

    def rend(self):
        r"""rend(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_rend(self)

    def clear(self):
        r"""clear(swig_dummy_type_axisinfo_vector self)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(swig_dummy_type_axisinfo_vector self)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos) -> std::vector< AxisInfo >::iterator
        erase(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator first, std::vector< AxisInfo >::iterator last) -> std::vector< AxisInfo >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(swig_dummy_type_axisinfo_vector self) -> swig_dummy_type_axisinfo_vector
        __init__(swig_dummy_type_axisinfo_vector self, swig_dummy_type_axisinfo_vector other) -> swig_dummy_type_axisinfo_vector
        __init__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type size) -> swig_dummy_type_axisinfo_vector
        __init__(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type size, AxisInfo value) -> swig_dummy_type_axisinfo_vector
        """
        _libBornAgainCore.swig_dummy_type_axisinfo_vector_swiginit(self, _libBornAgainCore.new_swig_dummy_type_axisinfo_vector(*args))

    def push_back(self, x):
        r"""push_back(swig_dummy_type_axisinfo_vector self, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_push_back(self, x)

    def front(self):
        r"""front(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_front(self)

    def back(self):
        r"""back(swig_dummy_type_axisinfo_vector self) -> AxisInfo"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_back(self)

    def assign(self, n, x):
        r"""assign(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type n, AxisInfo x)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type new_size)
        resize(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type new_size, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos, AxisInfo x) -> std::vector< AxisInfo >::iterator
        insert(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::iterator pos, std::vector< AxisInfo >::size_type n, AxisInfo x)
        """
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(swig_dummy_type_axisinfo_vector self, std::vector< AxisInfo >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(swig_dummy_type_axisinfo_vector self) -> std::vector< AxisInfo >::size_type"""
        return _libBornAgainCore.swig_dummy_type_axisinfo_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_axisinfo_vector

# Register swig_dummy_type_axisinfo_vector in _libBornAgainCore:
_libBornAgainCore.swig_dummy_type_axisinfo_vector_swigregister(swig_dummy_type_axisinfo_vector)

class swig_dummy_type_inode_vector(object):
    r"""Proxy of C++ std::vector< INode * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(swig_dummy_type_inode_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___bool__(self)

    def __len__(self):
        r"""__len__(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j) -> swig_dummy_type_inode_vector"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j)
        __setslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j, swig_dummy_type_inode_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, std::vector< INode * >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i)
        __delitem__(swig_dummy_type_inode_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(swig_dummy_type_inode_vector self, PySliceObject * slice) -> swig_dummy_type_inode_vector
        __getitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i) -> INode
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(swig_dummy_type_inode_vector self, PySliceObject * slice, swig_dummy_type_inode_vector v)
        __setitem__(swig_dummy_type_inode_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_inode_vector self, std::vector< INode * >::difference_type i, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_pop(self)

    def append(self, x):
        r"""append(swig_dummy_type_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_append(self, x)

    def empty(self):
        r"""empty(swig_dummy_type_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_empty(self)

    def size(self):
        r"""size(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_size(self)

    def swap(self, v):
        r"""swap(swig_dummy_type_inode_vector self, swig_dummy_type_inode_vector v)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_swap(self, v)

    def begin(self):
        r"""begin(swig_dummy_type_inode_vector self) -> std::vector< INode * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_begin(self)

    def end(self):
        r"""end(swig_dummy_type_inode_vector self) -> std::vector< INode * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_end(self)

    def rbegin(self):
        r"""rbegin(swig_dummy_type_inode_vector self) -> std::vector< INode * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_rbegin(self)

    def rend(self):
        r"""rend(swig_dummy_type_inode_vector self) -> std::vector< INode * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_rend(self)

    def clear(self):
        r"""clear(swig_dummy_type_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(swig_dummy_type_inode_vector self) -> std::vector< INode * >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(swig_dummy_type_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos) -> std::vector< INode * >::iterator
        erase(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator first, std::vector< INode * >::iterator last) -> std::vector< INode * >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(swig_dummy_type_inode_vector self) -> swig_dummy_type_inode_vector
        __init__(swig_dummy_type_inode_vector self, swig_dummy_type_inode_vector other) -> swig_dummy_type_inode_vector
        __init__(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type size) -> swig_dummy_type_inode_vector
        __init__(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type size, INode value) -> swig_dummy_type_inode_vector
        """
        _libBornAgainCore.swig_dummy_type_inode_vector_swiginit(self, _libBornAgainCore.new_swig_dummy_type_inode_vector(*args))

    def push_back(self, x):
        r"""push_back(swig_dummy_type_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_push_back(self, x)

    def front(self):
        r"""front(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_front(self)

    def back(self):
        r"""back(swig_dummy_type_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_back(self)

    def assign(self, n, x):
        r"""assign(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type n, INode x)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type new_size)
        resize(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type new_size, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos, INode x) -> std::vector< INode * >::iterator
        insert(swig_dummy_type_inode_vector self, std::vector< INode * >::iterator pos, std::vector< INode * >::size_type n, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_inode_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(swig_dummy_type_inode_vector self, std::vector< INode * >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(swig_dummy_type_inode_vector self) -> std::vector< INode * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_inode_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_inode_vector

# Register swig_dummy_type_inode_vector in _libBornAgainCore:
_libBornAgainCore.swig_dummy_type_inode_vector_swigregister(swig_dummy_type_inode_vector)

class swig_dummy_type_const_inode_vector(object):
    r"""Proxy of C++ std::vector< INode const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(swig_dummy_type_const_inode_vector self) -> SwigPyIterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___bool__(self)

    def __len__(self):
        r"""__len__(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j) -> swig_dummy_type_const_inode_vector"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j)
        __setslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j, swig_dummy_type_const_inode_vector v)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, std::vector< INode const * >::difference_type j)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i)
        __delitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice) -> swig_dummy_type_const_inode_vector
        __getitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i) -> INode
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice, swig_dummy_type_const_inode_vector v)
        __setitem__(swig_dummy_type_const_inode_vector self, PySliceObject * slice)
        __setitem__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::difference_type i, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_pop(self)

    def append(self, x):
        r"""append(swig_dummy_type_const_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_append(self, x)

    def empty(self):
        r"""empty(swig_dummy_type_const_inode_vector self) -> bool"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_empty(self)

    def size(self):
        r"""size(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_size(self)

    def swap(self, v):
        r"""swap(swig_dummy_type_const_inode_vector self, swig_dummy_type_const_inode_vector v)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_swap(self, v)

    def begin(self):
        r"""begin(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_begin(self)

    def end(self):
        r"""end(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_end(self)

    def rbegin(self):
        r"""rbegin(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_rbegin(self)

    def rend(self):
        r"""rend(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::reverse_iterator"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_rend(self)

    def clear(self):
        r"""clear(swig_dummy_type_const_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::allocator_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(swig_dummy_type_const_inode_vector self)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos) -> std::vector< INode const * >::iterator
        erase(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator first, std::vector< INode const * >::iterator last) -> std::vector< INode const * >::iterator
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(swig_dummy_type_const_inode_vector self) -> swig_dummy_type_const_inode_vector
        __init__(swig_dummy_type_const_inode_vector self, swig_dummy_type_const_inode_vector other) -> swig_dummy_type_const_inode_vector
        __init__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type size) -> swig_dummy_type_const_inode_vector
        __init__(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type size, INode value) -> swig_dummy_type_const_inode_vector
        """
        _libBornAgainCore.swig_dummy_type_const_inode_vector_swiginit(self, _libBornAgainCore.new_swig_dummy_type_const_inode_vector(*args))

    def push_back(self, x):
        r"""push_back(swig_dummy_type_const_inode_vector self, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_push_back(self, x)

    def front(self):
        r"""front(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_front(self)

    def back(self):
        r"""back(swig_dummy_type_const_inode_vector self) -> INode"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_back(self)

    def assign(self, n, x):
        r"""assign(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type n, INode x)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type new_size)
        resize(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type new_size, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos, INode x) -> std::vector< INode const * >::iterator
        insert(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::iterator pos, std::vector< INode const * >::size_type n, INode x)
        """
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(swig_dummy_type_const_inode_vector self, std::vector< INode const * >::size_type n)"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(swig_dummy_type_const_inode_vector self) -> std::vector< INode const * >::size_type"""
        return _libBornAgainCore.swig_dummy_type_const_inode_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_swig_dummy_type_const_inode_vector

# Register swig_dummy_type_const_inode_vector in _libBornAgainCore:
_libBornAgainCore.swig_dummy_type_const_inode_vector_swigregister(swig_dummy_type_const_inode_vector)

class SimulationFactoryTemp(object):
    r"""Proxy of C++ IFactory< std::string,Simulation > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def createItem(self, item_key):
        r"""createItem(SimulationFactoryTemp self, std::string const & item_key) -> Simulation"""
        return _libBornAgainCore.SimulationFactoryTemp_createItem(self, item_key)

    def registerItem(self, item_key, CreateFn):
        r"""registerItem(SimulationFactoryTemp self, std::string const & item_key, IFactory< std::string,Simulation >::CreateItemCallback CreateFn) -> bool"""
        return _libBornAgainCore.SimulationFactoryTemp_registerItem(self, item_key, CreateFn)

    def contains(self, item_key):
        r"""contains(SimulationFactoryTemp self, std::string const & item_key) -> bool"""
        return _libBornAgainCore.SimulationFactoryTemp_contains(self, item_key)

    def size(self):
        r"""size(SimulationFactoryTemp self) -> size_t"""
        return _libBornAgainCore.SimulationFactoryTemp_size(self)

    def __init__(self):
        r"""__init__(SimulationFactoryTemp self) -> SimulationFactoryTemp"""
        _libBornAgainCore.SimulationFactoryTemp_swiginit(self, _libBornAgainCore.new_SimulationFactoryTemp())
    __swig_destroy__ = _libBornAgainCore.delete_SimulationFactoryTemp

# Register SimulationFactoryTemp in _libBornAgainCore:
_libBornAgainCore.SimulationFactoryTemp_swigregister(SimulationFactoryTemp)

class IntensityData(object):
    r"""Proxy of C++ OutputData< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IntensityData self) -> IntensityData"""
        _libBornAgainCore.IntensityData_swiginit(self, _libBornAgainCore.new_IntensityData())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityData

    def clone(self):
        r"""clone(IntensityData self) -> IntensityData"""
        return _libBornAgainCore.IntensityData_clone(self)

    def copyFrom(self, x):
        r"""copyFrom(IntensityData self, IntensityData x)"""
        return _libBornAgainCore.IntensityData_copyFrom(self, x)

    def meanValues(self):
        r"""meanValues(IntensityData self) -> IntensityData"""
        return _libBornAgainCore.IntensityData_meanValues(self)

    def addAxis(self, *args):
        r"""
        addAxis(IntensityData self, IAxis new_axis)
        addAxis(IntensityData self, std::string const & name, size_t size, double start, double end)
        """
        return _libBornAgainCore.IntensityData_addAxis(self, *args)

    def getAxis(self, *args):
        r"""
        getAxis(IntensityData self, size_t serial_number) -> IAxis
        getAxis(IntensityData self, std::string const & axis_name) -> IAxis
        """
        return _libBornAgainCore.IntensityData_getAxis(self, *args)

    def getRank(self):
        r"""getRank(IntensityData self) -> size_t"""
        return _libBornAgainCore.IntensityData_getRank(self)

    def getAllocatedSize(self):
        r"""getAllocatedSize(IntensityData self) -> size_t"""
        return _libBornAgainCore.IntensityData_getAllocatedSize(self)

    def getAllSizes(self):
        r"""getAllSizes(IntensityData self) -> std::vector< size_t,std::allocator< size_t > >"""
        return _libBornAgainCore.IntensityData_getAllSizes(self)

    def getRawDataVector(self):
        r"""getRawDataVector(IntensityData self) -> vdouble1d_t"""
        return _libBornAgainCore.IntensityData_getRawDataVector(self)

    def totalSum(self):
        r"""totalSum(IntensityData self) -> double"""
        return _libBornAgainCore.IntensityData_totalSum(self)

    def begin(self, *args):
        r"""
        begin(IntensityData self) -> OutputData< double >::iterator
        begin(IntensityData self) -> OutputData< double >::const_iterator
        """
        return _libBornAgainCore.IntensityData_begin(self, *args)

    def end(self, *args):
        r"""
        end(IntensityData self) -> OutputData< double >::iterator
        end(IntensityData self) -> OutputData< double >::const_iterator
        """
        return _libBornAgainCore.IntensityData_end(self, *args)

    def getAxesBinIndices(self, global_index):
        r"""getAxesBinIndices(IntensityData self, size_t global_index) -> vector_integer_t"""
        return _libBornAgainCore.IntensityData_getAxesBinIndices(self, global_index)

    def getAxisBinIndex(self, *args):
        r"""
        getAxisBinIndex(IntensityData self, size_t global_index, size_t i_selected_axis) -> size_t
        getAxisBinIndex(IntensityData self, size_t global_index, std::string const & axis_name) -> size_t
        """
        return _libBornAgainCore.IntensityData_getAxisBinIndex(self, *args)

    def toGlobalIndex(self, axes_indices):
        r"""toGlobalIndex(IntensityData self, std::vector< unsigned int,std::allocator< unsigned int > > const & axes_indices) -> size_t"""
        return _libBornAgainCore.IntensityData_toGlobalIndex(self, axes_indices)

    def findGlobalIndex(self, coordinates):
        r"""findGlobalIndex(IntensityData self, vdouble1d_t coordinates) -> size_t"""
        return _libBornAgainCore.IntensityData_findGlobalIndex(self, coordinates)

    def getAxisValue(self, *args):
        r"""
        getAxisValue(IntensityData self, size_t global_index, size_t i_selected_axis) -> double
        getAxisValue(IntensityData self, size_t global_index, std::string const & axis_name) -> double
        """
        return _libBornAgainCore.IntensityData_getAxisValue(self, *args)

    def getAxesValues(self, global_index):
        r"""getAxesValues(IntensityData self, size_t global_index) -> vdouble1d_t"""
        return _libBornAgainCore.IntensityData_getAxesValues(self, global_index)

    def getAxisBin(self, *args):
        r"""
        getAxisBin(IntensityData self, size_t global_index, size_t i_selected_axis) -> Bin1D
        getAxisBin(IntensityData self, size_t global_index, std::string const & axis_name) -> Bin1D
        """
        return _libBornAgainCore.IntensityData_getAxisBin(self, *args)

    def clear(self):
        r"""clear(IntensityData self)"""
        return _libBornAgainCore.IntensityData_clear(self)

    def setAllTo(self, value):
        r"""setAllTo(IntensityData self, double const & value)"""
        return _libBornAgainCore.IntensityData_setAllTo(self, value)

    def scaleAll(self, factor):
        r"""scaleAll(IntensityData self, double const & factor)"""
        return _libBornAgainCore.IntensityData_scaleAll(self, factor)

    def setAxisSizes(self, rank, n_dims):
        r"""setAxisSizes(IntensityData self, size_t rank, int * n_dims)"""
        return _libBornAgainCore.IntensityData_setAxisSizes(self, rank, n_dims)

    def setRawDataVector(self, data_vector):
        r"""setRawDataVector(IntensityData self, vdouble1d_t data_vector)"""
        return _libBornAgainCore.IntensityData_setRawDataVector(self, data_vector)

    def setRawDataArray(self, source):
        r"""setRawDataArray(IntensityData self, double const * source)"""
        return _libBornAgainCore.IntensityData_setRawDataArray(self, source)

    def __iadd__(self, right):
        r"""__iadd__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___iadd__(self, right)

    def __isub__(self, right):
        r"""__isub__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___isub__(self, right)

    def __itruediv__(self, *args):
        return _libBornAgainCore.IntensityData___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __imul__(self, right):
        r"""__imul__(IntensityData self, IntensityData right) -> IntensityData"""
        return _libBornAgainCore.IntensityData___imul__(self, right)

    def getValue(self, index):
        r"""getValue(IntensityData self, size_t index) -> double"""
        return _libBornAgainCore.IntensityData_getValue(self, index)

    def getArray(self):
        r"""getArray(IntensityData self) -> PyObject *"""
        return _libBornAgainCore.IntensityData_getArray(self)

    def isInitialized(self):
        r"""isInitialized(IntensityData self) -> bool"""
        return _libBornAgainCore.IntensityData_isInitialized(self)

    def allocate(self):
        r"""allocate(IntensityData self)"""
        return _libBornAgainCore.IntensityData_allocate(self)

    def __getitem__(self, i):
        r"""__getitem__(IntensityData self, unsigned int i) -> double"""
        return _libBornAgainCore.IntensityData___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""__setitem__(IntensityData self, unsigned int i, double value) -> double"""
        return _libBornAgainCore.IntensityData___setitem__(self, i, value)

# Register IntensityData in _libBornAgainCore:
_libBornAgainCore.IntensityData_swigregister(IntensityData)

class FitObjective(object):
    r"""


    Holds vector of   SimDataPairs (experimental data and simulation results) for use in fitting.

    C++ includes: FitObjective.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FitObjective self) -> FitObjective
        FitObjective::FitObjective()

        """
        if self.__class__ == FitObjective:
            _self = None
        else:
            _self = self
        _libBornAgainCore.FitObjective_swiginit(self, _libBornAgainCore.new_FitObjective(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_FitObjective

    def evaluate_cpp(self, params):
        r"""
        evaluate_cpp(FitObjective self, Parameters params) -> double
        double FitObjective::evaluate(const Fit::Parameters &params)

        """
        return _libBornAgainCore.FitObjective_evaluate_cpp(self, params)

    def evaluate_residuals_cpp(self, params):
        r"""
        evaluate_residuals_cpp(FitObjective self, Parameters params) -> vdouble1d_t
        std::vector< double > FitObjective::evaluate_residuals(const Fit::Parameters &params)

        """
        return _libBornAgainCore.FitObjective_evaluate_residuals_cpp(self, params)

    def numberOfFitElements(self):
        r"""
        numberOfFitElements(FitObjective self) -> size_t
        size_t FitObjective::numberOfFitElements() const

        """
        return _libBornAgainCore.FitObjective_numberOfFitElements(self)

    def simulationResult(self, i_item=0):
        r"""
        simulationResult(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::simulationResult(size_t i_item=0) const

        Returns simulation result in the form of SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_simulationResult(self, i_item)

    def experimentalData(self, i_item=0):
        r"""
        experimentalData(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::experimentalData(size_t i_item=0) const

        Returns experimental data in the form of SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_experimentalData(self, i_item)

    def uncertaintyData_cpp(self, i_item=0):
        r"""
        uncertaintyData_cpp(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::uncertaintyData(size_t i_item=0) const

        Returns experimental data uncertainties in the form of SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_uncertaintyData_cpp(self, i_item)

    def relativeDifference(self, i_item=0):
        r"""
        relativeDifference(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::relativeDifference(size_t i_item=0) const

        Returns relative difference between simulation and experimental data in the form of SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_relativeDifference(self, i_item)

    def absoluteDifference(self, i_item=0):
        r"""
        absoluteDifference(FitObjective self, size_t i_item=0) -> SimulationResult
        SimulationResult FitObjective::absoluteDifference(size_t i_item=0) const

        Returns absolute value of difference between simulation and experimental data in the form of SimulationResult. 

        """
        return _libBornAgainCore.FitObjective_absoluteDifference(self, i_item)

    def experimental_array(self):
        r"""
        experimental_array(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::experimental_array() const

        Returns one dimensional array representing merged experimental data. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_experimental_array(self)

    def simulation_array(self):
        r"""
        simulation_array(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::simulation_array() const

        Returns one dimensional array representing merged simulated intensities data. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_simulation_array(self)

    def uncertainties_cpp(self):
        r"""
        uncertainties_cpp(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::uncertainties() const

        Returns one-dimensional array representing merged data uncertainties. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_uncertainties_cpp(self)

    def weights_array(self):
        r"""
        weights_array(FitObjective self) -> vdouble1d_t
        std::vector< double > FitObjective::weights_array() const

        Returns one-dimensional array representing merged user weights. The area outside of the region of interest is not included, masked data is nullified. 

        """
        return _libBornAgainCore.FitObjective_weights_array(self)

    def initPrint(self, every_nth):
        r"""
        initPrint(FitObjective self, int every_nth)
        void FitObjective::initPrint(int every_nth)

        Initializes printing to standard output on every_nth fit iteration. 

        """
        return _libBornAgainCore.FitObjective_initPrint(self, every_nth)

    def initPlot_cpp(self, every_nth, callback):
        r"""
        initPlot_cpp(FitObjective self, int every_nth, PyObserverCallback callback)
        void FitObjective::initPlot(int every_nth, fit_observer_t observer)

        """
        return _libBornAgainCore.FitObjective_initPlot_cpp(self, every_nth, callback)

    def iterationInfo(self):
        r"""
        iterationInfo(FitObjective self) -> IterationInfo
        IterationInfo FitObjective::iterationInfo() const

        """
        return _libBornAgainCore.FitObjective_iterationInfo(self)

    def minimizerResult(self):
        r"""
        minimizerResult(FitObjective self) -> Fit::MinimizerResult
        Fit::MinimizerResult FitObjective::minimizerResult() const

        """
        return _libBornAgainCore.FitObjective_minimizerResult(self)

    def finalize_cpp(self, result):
        r"""
        finalize_cpp(FitObjective self, Fit::MinimizerResult const & result)
        void FitObjective::finalize(const Fit::MinimizerResult &result)

        Should be explicitely called on last iteration to notify all observers. 

        """
        return _libBornAgainCore.FitObjective_finalize_cpp(self, result)

    def fitObjectCount(self):
        r"""
        fitObjectCount(FitObjective self) -> unsigned int
        unsigned FitObjective::fitObjectCount() const

        """
        return _libBornAgainCore.FitObjective_fitObjectCount(self)

    def run_simulations(self, params):
        r"""
        run_simulations(FitObjective self, Parameters params)
        void FitObjective::run_simulations(const Fit::Parameters &params)

        """
        return _libBornAgainCore.FitObjective_run_simulations(self, params)

    def setChiSquaredModule(self, module):
        r"""
        setChiSquaredModule(FitObjective self, IChiSquaredModule module)
        void FitObjective::setChiSquaredModule(const IChiSquaredModule &module)

        """
        return _libBornAgainCore.FitObjective_setChiSquaredModule(self, module)

    def setObjectiveMetric(self, *args):
        r"""
        setObjectiveMetric(FitObjective self, std::string const & metric)
        setObjectiveMetric(FitObjective self, std::string const & metric, std::string const & norm)
        void FitObjective::setObjectiveMetric(std::unique_ptr< ObjectiveMetric > metric)

        """
        return _libBornAgainCore.FitObjective_setObjectiveMetric(self, *args)

    def containsUncertainties_cpp(self, i_item):
        r"""
        containsUncertainties_cpp(FitObjective self, size_t i_item) -> bool
        bool FitObjective::containsUncertainties(size_t i_item) const

        Returns true if the specified DataPair element contains uncertainties. 

        """
        return _libBornAgainCore.FitObjective_containsUncertainties_cpp(self, i_item)

    def allPairsHaveUncertainties_cpp(self):
        r"""
        allPairsHaveUncertainties_cpp(FitObjective self) -> bool
        bool FitObjective::allPairsHaveUncertainties() const

        Returns true if all the data pairs in  FitObjective instance contain uncertainties. 

        """
        return _libBornAgainCore.FitObjective_allPairsHaveUncertainties_cpp(self)

    @staticmethod
    def availableMetricOptions():
        r"""availableMetricOptions() -> std::string"""
        return _libBornAgainCore.FitObjective_availableMetricOptions()

    def addSimulationAndData_cpp(self, *args):
        r"""
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble1d_t data, double weight=1.0)
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble1d_t data, vdouble1d_t uncertainties, double weight=1.0)
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble2d_t data, double weight=1.0)
        addSimulationAndData_cpp(FitObjective self, PyBuilderCallback callback, vdouble2d_t data, vdouble2d_t uncertainties, double weight=1.0)
        void FitObjective::addSimulationAndData(PyBuilderCallback &callback, const T &data, const T &uncertainties, double weight=1.0)

        Constructs simulation/data pair for later fit.

        Parameters:
        -----------

        callback: 
        simulation builder capable of producing simulations

        data: 
        experimental data array

        uncertainties: 
        data uncertainties array

        weight: 
        weight of dataset in metric calculations 

        """
        return _libBornAgainCore.FitObjective_addSimulationAndData_cpp(self, *args)

    def addSimulationAndData(self, callback, data, *args, **kwargs):
        """
        Sets simulation and experimental data to the fit objective.
        Optionally accepts experimental data uncertainties and
        user-defined dataset weight.

        Arguments:

        callback -- user-defined function returning fully-defined bornagain.Simulation object.
        The function must use fit parameter dictionary as its input.

        data -- numpy array with experimental data.

        uncertainties -- numpy array with experimental data uncertainties.
        Array shape must correspond to the shape of data. Optional argument.

        weight -- user-defined weight of the dataset. If not specified, defaults to 1.0.
        """
        if not hasattr(self, 'callback_container'):
            self.callback_container = []
        wrp = SimulationBuilderWrapper(callback)
        self.callback_container.append(wrp)
        return self.addSimulationAndData_cpp(wrp, data, *args, **kwargs)

    def convert_params(self, params):
        """
        Converts parameters to what FitObjective::evaluate expects
        """

        if str(params.__module__) == "lmfit.parameter":
            bapars = libBornAgainFit.Parameters()
            for p in params:
                bapars.add(p, params[p].value)
            return bapars
        else:
            return params

    def evaluate_residuals(self, params):
        return self.evaluate_residuals_cpp(self.convert_params(params))

    def evaluate(self, params):
        return self.evaluate_cpp(self.convert_params(params))

    def convert_result(self, minim_result):
        """
        Converts result reported by arbitrary minimizer to ba.MinimizerResult
        """

        if str(minim_result.__module__) == "lmfit.minimizer":
            return libBornAgainFit.MinimizerResult()
        else:
            return minim_result

    def finalize(self, minimizer_result):
        return self.finalize_cpp(self.convert_result(minimizer_result))

    def create_default_plotter(self):
        import plot_utils
        self.m_plotter = plot_utils.PlotterGISAS()
        return self.m_plotter.plot

    def initPlot(self, every_nth, callback = None):
        if not callback:
            callback = self.create_default_plotter()

        self.wrp_plot_observer = ObserverCallbackWrapper(callback)
        return self.initPlot_cpp(every_nth, self.wrp_plot_observer)

    def uncertainties(self):
        """
        Returns one-dimensional array representing merged data uncertainties.
        If any of the associated data pairs lack uncertainties, returns None.
        """
        if self.allPairsHaveUncertainties_cpp():
            return self.uncertainties_cpp()
        return None

    def uncertaintyData(self, i=0):
        """
        Returns uncertainties for i-th simulation-data pair. If
        no uncertainties are assigned to the data pair, returns
        None.
        """
        if self.containsUncertainties_cpp(i):
            return self.uncertaintyData_cpp(i)
        return None

    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FitObjective(self)
        return weakref.proxy(self)

# Register FitObjective in _libBornAgainCore:
_libBornAgainCore.FitObjective_swigregister(FitObjective)

def FitObjective_availableMetricOptions():
    r"""FitObjective_availableMetricOptions() -> std::string"""
    return _libBornAgainCore.FitObjective_availableMetricOptions()


def GetMajorVersionNumber():
    r"""GetMajorVersionNumber() -> int"""
    return _libBornAgainCore.GetMajorVersionNumber()

def GetMinorVersionNumber():
    r"""GetMinorVersionNumber() -> int"""
    return _libBornAgainCore.GetMinorVersionNumber()

def GetPatchVersionNumber():
    r"""GetPatchVersionNumber() -> int"""
    return _libBornAgainCore.GetPatchVersionNumber()

def GetName():
    r"""GetName() -> std::string"""
    return _libBornAgainCore.GetName()

def GetVersionNumber():
    r"""GetVersionNumber() -> std::string"""
    return _libBornAgainCore.GetVersionNumber()
class IShape2D(libBornAgainBase.ICloneable):
    r"""Proxy of C++ IShape2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(IShape2D self) -> IShape2D"""
        return _libBornAgainCore.IShape2D_clone(self)

    def contains(self, *args):
        r"""
        contains(IShape2D self, double x, double y) -> bool
        contains(IShape2D self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.IShape2D_contains(self, *args)
    __swig_destroy__ = _libBornAgainCore.delete_IShape2D

# Register IShape2D in _libBornAgainCore:
_libBornAgainCore.IShape2D_swigregister(IShape2D)
cvar = _libBornAgainCore.cvar
major_version_number = cvar.major_version_number
minor_version_number = cvar.minor_version_number
patch_version_number = cvar.patch_version_number

class Ellipse(IShape2D):
    r"""Proxy of C++ Ellipse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, xcenter, ycenter, xradius, yradius, theta=0.0):
        r"""__init__(Ellipse self, double xcenter, double ycenter, double xradius, double yradius, double theta=0.0) -> Ellipse"""
        _libBornAgainCore.Ellipse_swiginit(self, _libBornAgainCore.new_Ellipse(xcenter, ycenter, xradius, yradius, theta))

    def clone(self):
        r"""clone(Ellipse self) -> Ellipse"""
        return _libBornAgainCore.Ellipse_clone(self)

    def contains(self, *args):
        r"""
        contains(Ellipse self, double x, double y) -> bool
        contains(Ellipse self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.Ellipse_contains(self, *args)

    def getCenterX(self):
        r"""getCenterX(Ellipse self) -> double"""
        return _libBornAgainCore.Ellipse_getCenterX(self)

    def getCenterY(self):
        r"""getCenterY(Ellipse self) -> double"""
        return _libBornAgainCore.Ellipse_getCenterY(self)

    def getRadiusX(self):
        r"""getRadiusX(Ellipse self) -> double"""
        return _libBornAgainCore.Ellipse_getRadiusX(self)

    def getRadiusY(self):
        r"""getRadiusY(Ellipse self) -> double"""
        return _libBornAgainCore.Ellipse_getRadiusY(self)

    def getTheta(self):
        r"""getTheta(Ellipse self) -> double"""
        return _libBornAgainCore.Ellipse_getTheta(self)
    __swig_destroy__ = _libBornAgainCore.delete_Ellipse

# Register Ellipse in _libBornAgainCore:
_libBornAgainCore.Ellipse_swigregister(Ellipse)

class Line(IShape2D):
    r"""Proxy of C++ Line class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x1, y1, x2, y2):
        r"""__init__(Line self, double x1, double y1, double x2, double y2) -> Line"""
        _libBornAgainCore.Line_swiginit(self, _libBornAgainCore.new_Line(x1, y1, x2, y2))

    def clone(self):
        r"""clone(Line self) -> Line"""
        return _libBornAgainCore.Line_clone(self)

    def contains(self, *args):
        r"""
        contains(Line self, double x, double y) -> bool
        contains(Line self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.Line_contains(self, *args)
    __swig_destroy__ = _libBornAgainCore.delete_Line

# Register Line in _libBornAgainCore:
_libBornAgainCore.Line_swigregister(Line)

class VerticalLine(IShape2D):
    r"""Proxy of C++ VerticalLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x):
        r"""__init__(VerticalLine self, double x) -> VerticalLine"""
        _libBornAgainCore.VerticalLine_swiginit(self, _libBornAgainCore.new_VerticalLine(x))

    def clone(self):
        r"""clone(VerticalLine self) -> VerticalLine"""
        return _libBornAgainCore.VerticalLine_clone(self)

    def contains(self, *args):
        r"""
        contains(VerticalLine self, double x, double y) -> bool
        contains(VerticalLine self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.VerticalLine_contains(self, *args)

    def getXpos(self):
        r"""getXpos(VerticalLine self) -> double"""
        return _libBornAgainCore.VerticalLine_getXpos(self)
    __swig_destroy__ = _libBornAgainCore.delete_VerticalLine

# Register VerticalLine in _libBornAgainCore:
_libBornAgainCore.VerticalLine_swigregister(VerticalLine)

class HorizontalLine(IShape2D):
    r"""Proxy of C++ HorizontalLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, y):
        r"""__init__(HorizontalLine self, double y) -> HorizontalLine"""
        _libBornAgainCore.HorizontalLine_swiginit(self, _libBornAgainCore.new_HorizontalLine(y))

    def clone(self):
        r"""clone(HorizontalLine self) -> HorizontalLine"""
        return _libBornAgainCore.HorizontalLine_clone(self)

    def contains(self, *args):
        r"""
        contains(HorizontalLine self, double x, double y) -> bool
        contains(HorizontalLine self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.HorizontalLine_contains(self, *args)

    def getYpos(self):
        r"""getYpos(HorizontalLine self) -> double"""
        return _libBornAgainCore.HorizontalLine_getYpos(self)
    __swig_destroy__ = _libBornAgainCore.delete_HorizontalLine

# Register HorizontalLine in _libBornAgainCore:
_libBornAgainCore.HorizontalLine_swigregister(HorizontalLine)

class Polygon(IShape2D):
    r"""Proxy of C++ Polygon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Polygon self, vdouble1d_t x, vdouble1d_t y) -> Polygon
        __init__(Polygon self, vdouble2d_t points) -> Polygon
        __init__(Polygon self, PolygonPrivate const * d) -> Polygon
        """
        _libBornAgainCore.Polygon_swiginit(self, _libBornAgainCore.new_Polygon(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Polygon

    def clone(self):
        r"""clone(Polygon self) -> Polygon"""
        return _libBornAgainCore.Polygon_clone(self)

    def contains(self, *args):
        r"""
        contains(Polygon self, double x, double y) -> bool
        contains(Polygon self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.Polygon_contains(self, *args)

    def getArea(self):
        r"""getArea(Polygon self) -> double"""
        return _libBornAgainCore.Polygon_getArea(self)

    def getPoints(self, xpos, ypos):
        r"""getPoints(Polygon self, vdouble1d_t xpos, vdouble1d_t ypos)"""
        return _libBornAgainCore.Polygon_getPoints(self, xpos, ypos)

# Register Polygon in _libBornAgainCore:
_libBornAgainCore.Polygon_swigregister(Polygon)

class Rectangle(IShape2D):
    r"""Proxy of C++ Rectangle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, xlow, ylow, xup, yup):
        r"""__init__(Rectangle self, double xlow, double ylow, double xup, double yup) -> Rectangle"""
        _libBornAgainCore.Rectangle_swiginit(self, _libBornAgainCore.new_Rectangle(xlow, ylow, xup, yup))

    def clone(self):
        r"""clone(Rectangle self) -> Rectangle"""
        return _libBornAgainCore.Rectangle_clone(self)

    def contains(self, *args):
        r"""
        contains(Rectangle self, double x, double y) -> bool
        contains(Rectangle self, Bin1D const & binx, Bin1D const & biny) -> bool
        """
        return _libBornAgainCore.Rectangle_contains(self, *args)

    def getArea(self):
        r"""getArea(Rectangle self) -> double"""
        return _libBornAgainCore.Rectangle_getArea(self)

    def getXlow(self):
        r"""getXlow(Rectangle self) -> double"""
        return _libBornAgainCore.Rectangle_getXlow(self)

    def getYlow(self):
        r"""getYlow(Rectangle self) -> double"""
        return _libBornAgainCore.Rectangle_getYlow(self)

    def getXup(self):
        r"""getXup(Rectangle self) -> double"""
        return _libBornAgainCore.Rectangle_getXup(self)

    def getYup(self):
        r"""getYup(Rectangle self) -> double"""
        return _libBornAgainCore.Rectangle_getYup(self)
    __swig_destroy__ = _libBornAgainCore.delete_Rectangle

# Register Rectangle in _libBornAgainCore:
_libBornAgainCore.Rectangle_swigregister(Rectangle)

class IntensityDataIOFactory(object):
    r"""Proxy of C++ IntensityDataIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def readOutputData(file_name):
        r"""readOutputData(std::string const & file_name) -> IntensityData"""
        return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)

    @staticmethod
    def readReflectometryData(file_name):
        r"""readReflectometryData(std::string const & file_name) -> IntensityData"""
        return _libBornAgainCore.IntensityDataIOFactory_readReflectometryData(file_name)

    @staticmethod
    def readIntensityData(file_name):
        r"""readIntensityData(std::string const & file_name) -> IHistogram"""
        return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)

    @staticmethod
    def writeOutputData(data, file_name):
        r"""writeOutputData(IntensityData data, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)

    @staticmethod
    def writeIntensityData(histogram, file_name):
        r"""writeIntensityData(IHistogram histogram, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)

    @staticmethod
    def writeSimulationResult(result, file_name):
        r"""writeSimulationResult(SimulationResult result, std::string const & file_name)"""
        return _libBornAgainCore.IntensityDataIOFactory_writeSimulationResult(result, file_name)

    def __init__(self):
        r"""__init__(IntensityDataIOFactory self) -> IntensityDataIOFactory"""
        _libBornAgainCore.IntensityDataIOFactory_swiginit(self, _libBornAgainCore.new_IntensityDataIOFactory())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityDataIOFactory

# Register IntensityDataIOFactory in _libBornAgainCore:
_libBornAgainCore.IntensityDataIOFactory_swigregister(IntensityDataIOFactory)

def IntensityDataIOFactory_readOutputData(file_name):
    r"""IntensityDataIOFactory_readOutputData(std::string const & file_name) -> IntensityData"""
    return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)

def IntensityDataIOFactory_readReflectometryData(file_name):
    r"""IntensityDataIOFactory_readReflectometryData(std::string const & file_name) -> IntensityData"""
    return _libBornAgainCore.IntensityDataIOFactory_readReflectometryData(file_name)

def IntensityDataIOFactory_readIntensityData(file_name):
    r"""IntensityDataIOFactory_readIntensityData(std::string const & file_name) -> IHistogram"""
    return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)

def IntensityDataIOFactory_writeOutputData(data, file_name):
    r"""IntensityDataIOFactory_writeOutputData(IntensityData data, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)

def IntensityDataIOFactory_writeIntensityData(histogram, file_name):
    r"""IntensityDataIOFactory_writeIntensityData(IHistogram histogram, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)

def IntensityDataIOFactory_writeSimulationResult(result, file_name):
    r"""IntensityDataIOFactory_writeSimulationResult(SimulationResult result, std::string const & file_name)"""
    return _libBornAgainCore.IntensityDataIOFactory_writeSimulationResult(result, file_name)

class IDetector(libBornAgainBase.ICloneable, libBornAgainParam.INode):
    r"""Proxy of C++ IDetector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(IDetector self) -> IDetector"""
        return _libBornAgainCore.IDetector_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IDetector

    def init(self, arg2):
        r"""init(IDetector self, Beam arg2)"""
        return _libBornAgainCore.IDetector_init(self, arg2)

    def addAxis(self, axis):
        r"""addAxis(IDetector self, IAxis axis)"""
        return _libBornAgainCore.IDetector_addAxis(self, axis)

    def getAxis(self, index):
        r"""getAxis(IDetector self, size_t index) -> IAxis"""
        return _libBornAgainCore.IDetector_getAxis(self, index)

    def dimension(self):
        r"""dimension(IDetector self) -> size_t"""
        return _libBornAgainCore.IDetector_dimension(self)

    def axisBinIndex(self, index, selected_axis):
        r"""axisBinIndex(IDetector self, size_t index, size_t selected_axis) -> size_t"""
        return _libBornAgainCore.IDetector_axisBinIndex(self, index, selected_axis)

    def totalSize(self):
        r"""totalSize(IDetector self) -> size_t"""
        return _libBornAgainCore.IDetector_totalSize(self)

    def detectorMask(self):
        r"""detectorMask(IDetector self) -> DetectorMask"""
        return _libBornAgainCore.IDetector_detectorMask(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        r"""setAnalyzerProperties(IDetector self, kvector_t direction, double efficiency, double total_transmission)"""
        return _libBornAgainCore.IDetector_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def setDetectorResolution(self, p_detector_resolution):
        r"""setDetectorResolution(IDetector self, IDetectorResolution p_detector_resolution)"""
        return _libBornAgainCore.IDetector_setDetectorResolution(self, p_detector_resolution)

    def setResolutionFunction(self, resFunc):
        r"""setResolutionFunction(IDetector self, IResolutionFunction2D resFunc)"""
        return _libBornAgainCore.IDetector_setResolutionFunction(self, resFunc)

    def applyDetectorResolution(self, p_intensity_map):
        r"""applyDetectorResolution(IDetector self, IntensityData p_intensity_map)"""
        return _libBornAgainCore.IDetector_applyDetectorResolution(self, p_intensity_map)

    def removeDetectorResolution(self):
        r"""removeDetectorResolution(IDetector self)"""
        return _libBornAgainCore.IDetector_removeDetectorResolution(self)

    def detectorResolution(self):
        r"""detectorResolution(IDetector self) -> IDetectorResolution"""
        return _libBornAgainCore.IDetector_detectorResolution(self)

    def regionOfInterest(self):
        r"""regionOfInterest(IDetector self) -> RegionOfInterest const *"""
        return _libBornAgainCore.IDetector_regionOfInterest(self)

    def resetRegionOfInterest(self):
        r"""resetRegionOfInterest(IDetector self)"""
        return _libBornAgainCore.IDetector_resetRegionOfInterest(self)

    def detectionProperties(self):
        r"""detectionProperties(IDetector self) -> DetectionProperties const &"""
        return _libBornAgainCore.IDetector_detectionProperties(self)

    def createDetectorIntensity(self, elements):
        r"""createDetectorIntensity(IDetector self, std::vector< SimulationElement,std::allocator< SimulationElement > > const & elements) -> IntensityData"""
        return _libBornAgainCore.IDetector_createDetectorIntensity(self, elements)

    def defaultAxesUnits(self):
        r"""defaultAxesUnits(IDetector self) -> Axes::Units"""
        return _libBornAgainCore.IDetector_defaultAxesUnits(self)

    def numberOfSimulationElements(self):
        r"""numberOfSimulationElements(IDetector self) -> size_t"""
        return _libBornAgainCore.IDetector_numberOfSimulationElements(self)

    def getChildren(self):
        r"""getChildren(IDetector self) -> swig_dummy_type_const_inode_vector"""
        return _libBornAgainCore.IDetector_getChildren(self)

    def iterate(self, func, visit_masks=False):
        r"""iterate(IDetector self, std::function< void (IDetector::const_iterator) > func, bool visit_masks=False)"""
        return _libBornAgainCore.IDetector_iterate(self, func, visit_masks)

# Register IDetector in _libBornAgainCore:
_libBornAgainCore.IDetector_swigregister(IDetector)

class IDetector2D(IDetector):
    r"""Proxy of C++ IDetector2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(IDetector2D self) -> IDetector2D"""
        return _libBornAgainCore.IDetector2D_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IDetector2D

    def setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max):
        r"""setDetectorParameters(IDetector2D self, size_t n_x, double x_min, double x_max, size_t n_y, double y_min, double y_max)"""
        return _libBornAgainCore.IDetector2D_setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max)

    def removeMasks(self):
        r"""removeMasks(IDetector2D self)"""
        return _libBornAgainCore.IDetector2D_removeMasks(self)

    def detectorMask(self):
        r"""detectorMask(IDetector2D self) -> DetectorMask"""
        return _libBornAgainCore.IDetector2D_detectorMask(self)

    def addMask(self, shape, mask_value=True):
        r"""addMask(IDetector2D self, IShape2D shape, bool mask_value=True)"""
        return _libBornAgainCore.IDetector2D_addMask(self, shape, mask_value)

    def maskAll(self):
        r"""maskAll(IDetector2D self)"""
        return _libBornAgainCore.IDetector2D_maskAll(self)

    def regionOfInterest(self):
        r"""regionOfInterest(IDetector2D self) -> RegionOfInterest const *"""
        return _libBornAgainCore.IDetector2D_regionOfInterest(self)

    def setRegionOfInterest(self, xlow, ylow, xup, yup):
        r"""setRegionOfInterest(IDetector2D self, double xlow, double ylow, double xup, double yup)"""
        return _libBornAgainCore.IDetector2D_setRegionOfInterest(self, xlow, ylow, xup, yup)

    def resetRegionOfInterest(self):
        r"""resetRegionOfInterest(IDetector2D self)"""
        return _libBornAgainCore.IDetector2D_resetRegionOfInterest(self)

    def active_indices(self):
        r"""active_indices(IDetector2D self) -> std::vector< size_t,std::allocator< size_t > >"""
        return _libBornAgainCore.IDetector2D_active_indices(self)

    def createPixel(self, index):
        r"""createPixel(IDetector2D self, size_t index) -> IPixel *"""
        return _libBornAgainCore.IDetector2D_createPixel(self, index)

    def indexOfSpecular(self, beam):
        r"""indexOfSpecular(IDetector2D self, Beam beam) -> size_t"""
        return _libBornAgainCore.IDetector2D_indexOfSpecular(self, beam)

# Register IDetector2D in _libBornAgainCore:
_libBornAgainCore.IDetector2D_swigregister(IDetector2D)

class SphericalDetector(IDetector2D):
    r"""Proxy of C++ SphericalDetector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SphericalDetector self) -> SphericalDetector
        __init__(SphericalDetector self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max) -> SphericalDetector
        __init__(SphericalDetector self, SphericalDetector other) -> SphericalDetector
        """
        _libBornAgainCore.SphericalDetector_swiginit(self, _libBornAgainCore.new_SphericalDetector(*args))

    def clone(self):
        r"""clone(SphericalDetector self) -> SphericalDetector"""
        return _libBornAgainCore.SphericalDetector_clone(self)

    def accept(self, visitor):
        r"""accept(SphericalDetector self, INodeVisitor * visitor)"""
        return _libBornAgainCore.SphericalDetector_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_SphericalDetector

    def defaultAxesUnits(self):
        r"""defaultAxesUnits(SphericalDetector self) -> Axes::Units"""
        return _libBornAgainCore.SphericalDetector_defaultAxesUnits(self)

# Register SphericalDetector in _libBornAgainCore:
_libBornAgainCore.SphericalDetector_swigregister(SphericalDetector)

class DetectorMask(object):
    r"""Proxy of C++ DetectorMask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DetectorMask self) -> DetectorMask
        __init__(DetectorMask self, DetectorMask other) -> DetectorMask
        """
        _libBornAgainCore.DetectorMask_swiginit(self, _libBornAgainCore.new_DetectorMask(*args))

    def addMask(self, shape, mask_value):
        r"""addMask(DetectorMask self, IShape2D shape, bool mask_value)"""
        return _libBornAgainCore.DetectorMask_addMask(self, shape, mask_value)

    def initMaskData(self, *args):
        r"""
        initMaskData(DetectorMask self, IDetector2D detector)
        initMaskData(DetectorMask self, IntensityData data)
        """
        return _libBornAgainCore.DetectorMask_initMaskData(self, *args)

    def isMasked(self, index):
        r"""isMasked(DetectorMask self, size_t index) -> bool"""
        return _libBornAgainCore.DetectorMask_isMasked(self, index)

    def getMaskData(self):
        r"""getMaskData(DetectorMask self) -> OutputData< bool > const *"""
        return _libBornAgainCore.DetectorMask_getMaskData(self)

    def createHistogram(self):
        r"""createHistogram(DetectorMask self) -> Histogram2D"""
        return _libBornAgainCore.DetectorMask_createHistogram(self)

    def removeMasks(self):
        r"""removeMasks(DetectorMask self)"""
        return _libBornAgainCore.DetectorMask_removeMasks(self)

    def hasMasks(self):
        r"""hasMasks(DetectorMask self) -> bool"""
        return _libBornAgainCore.DetectorMask_hasMasks(self)

    def numberOfMaskedChannels(self):
        r"""numberOfMaskedChannels(DetectorMask self) -> int"""
        return _libBornAgainCore.DetectorMask_numberOfMaskedChannels(self)

    def numberOfMasks(self):
        r"""numberOfMasks(DetectorMask self) -> size_t"""
        return _libBornAgainCore.DetectorMask_numberOfMasks(self)

    def getMaskShape(self, mask_index, mask_value):
        r"""getMaskShape(DetectorMask self, size_t mask_index, bool & mask_value) -> IShape2D"""
        return _libBornAgainCore.DetectorMask_getMaskShape(self, mask_index, mask_value)
    __swig_destroy__ = _libBornAgainCore.delete_DetectorMask

# Register DetectorMask in _libBornAgainCore:
_libBornAgainCore.DetectorMask_swigregister(DetectorMask)

class IsGISAXSDetector(SphericalDetector):
    r"""Proxy of C++ IsGISAXSDetector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IsGISAXSDetector self) -> IsGISAXSDetector
        __init__(IsGISAXSDetector self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max) -> IsGISAXSDetector
        __init__(IsGISAXSDetector self, IsGISAXSDetector other) -> IsGISAXSDetector
        """
        _libBornAgainCore.IsGISAXSDetector_swiginit(self, _libBornAgainCore.new_IsGISAXSDetector(*args))

    def clone(self):
        r"""clone(IsGISAXSDetector self) -> IsGISAXSDetector"""
        return _libBornAgainCore.IsGISAXSDetector_clone(self)

    def accept(self, visitor):
        r"""accept(IsGISAXSDetector self, INodeVisitor * visitor)"""
        return _libBornAgainCore.IsGISAXSDetector_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_IsGISAXSDetector

# Register IsGISAXSDetector in _libBornAgainCore:
_libBornAgainCore.IsGISAXSDetector_swigregister(IsGISAXSDetector)

class RectangularDetector(IDetector2D):
    r"""Proxy of C++ RectangularDetector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GENERIC = _libBornAgainCore.RectangularDetector_GENERIC
    
    PERPENDICULAR_TO_SAMPLE = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_SAMPLE
    
    PERPENDICULAR_TO_DIRECT_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_DIRECT_BEAM
    
    PERPENDICULAR_TO_REFLECTED_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM
    
    PERPENDICULAR_TO_REFLECTED_BEAM_DPOS = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM_DPOS
    

    def __init__(self, *args):
        r"""
        __init__(RectangularDetector self, size_t nxbins, double width, size_t nybins, double height) -> RectangularDetector
        __init__(RectangularDetector self, RectangularDetector other) -> RectangularDetector
        """
        _libBornAgainCore.RectangularDetector_swiginit(self, _libBornAgainCore.new_RectangularDetector(*args))

    def clone(self):
        r"""clone(RectangularDetector self) -> RectangularDetector"""
        return _libBornAgainCore.RectangularDetector_clone(self)

    def accept(self, visitor):
        r"""accept(RectangularDetector self, INodeVisitor * visitor)"""
        return _libBornAgainCore.RectangularDetector_accept(self, visitor)
    __swig_destroy__ = _libBornAgainCore.delete_RectangularDetector

    def init(self, beam):
        r"""init(RectangularDetector self, Beam beam)"""
        return _libBornAgainCore.RectangularDetector_init(self, beam)

    def setPosition(self, *args):
        r"""setPosition(RectangularDetector self, kvector_t normal_to_detector, double u0, double v0, kvector_t direction=kvector_t(0.0, -1.0, 0.0))"""
        return _libBornAgainCore.RectangularDetector_setPosition(self, *args)

    def setPerpendicularToSampleX(self, distance, u0, v0):
        r"""setPerpendicularToSampleX(RectangularDetector self, double distance, double u0, double v0)"""
        return _libBornAgainCore.RectangularDetector_setPerpendicularToSampleX(self, distance, u0, v0)

    def setPerpendicularToDirectBeam(self, distance, u0, v0):
        r"""setPerpendicularToDirectBeam(RectangularDetector self, double distance, double u0, double v0)"""
        return _libBornAgainCore.RectangularDetector_setPerpendicularToDirectBeam(self, distance, u0, v0)

    def setPerpendicularToReflectedBeam(self, distance, u0=0.0, v0=0.0):
        r"""setPerpendicularToReflectedBeam(RectangularDetector self, double distance, double u0=0.0, double v0=0.0)"""
        return _libBornAgainCore.RectangularDetector_setPerpendicularToReflectedBeam(self, distance, u0, v0)

    def setDirectBeamPosition(self, u0, v0):
        r"""setDirectBeamPosition(RectangularDetector self, double u0, double v0)"""
        return _libBornAgainCore.RectangularDetector_setDirectBeamPosition(self, u0, v0)

    def getWidth(self):
        r"""getWidth(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getWidth(self)

    def getHeight(self):
        r"""getHeight(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getHeight(self)

    def getNbinsX(self):
        r"""getNbinsX(RectangularDetector self) -> size_t"""
        return _libBornAgainCore.RectangularDetector_getNbinsX(self)

    def getNbinsY(self):
        r"""getNbinsY(RectangularDetector self) -> size_t"""
        return _libBornAgainCore.RectangularDetector_getNbinsY(self)

    def getNormalVector(self):
        r"""getNormalVector(RectangularDetector self) -> kvector_t"""
        return _libBornAgainCore.RectangularDetector_getNormalVector(self)

    def getU0(self):
        r"""getU0(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getU0(self)

    def getV0(self):
        r"""getV0(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getV0(self)

    def getDirectionVector(self):
        r"""getDirectionVector(RectangularDetector self) -> kvector_t"""
        return _libBornAgainCore.RectangularDetector_getDirectionVector(self)

    def getDistance(self):
        r"""getDistance(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getDistance(self)

    def getDirectBeamU0(self):
        r"""getDirectBeamU0(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getDirectBeamU0(self)

    def getDirectBeamV0(self):
        r"""getDirectBeamV0(RectangularDetector self) -> double"""
        return _libBornAgainCore.RectangularDetector_getDirectBeamV0(self)

    def getDetectorArrangment(self):
        r"""getDetectorArrangment(RectangularDetector self) -> RectangularDetector::EDetectorArrangement"""
        return _libBornAgainCore.RectangularDetector_getDetectorArrangment(self)

    def defaultAxesUnits(self):
        r"""defaultAxesUnits(RectangularDetector self) -> Axes::Units"""
        return _libBornAgainCore.RectangularDetector_defaultAxesUnits(self)

    def regionOfInterestPixel(self):
        r"""regionOfInterestPixel(RectangularDetector self) -> RectangularPixel *"""
        return _libBornAgainCore.RectangularDetector_regionOfInterestPixel(self)

# Register RectangularDetector in _libBornAgainCore:
_libBornAgainCore.RectangularDetector_swigregister(RectangularDetector)

class IDetectorResolution(libBornAgainBase.ICloneable, libBornAgainParam.INode):
    r"""Proxy of C++ IDetectorResolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IDetectorResolution

    def applyDetectorResolution(self, p_intensity_map):
        r"""applyDetectorResolution(IDetectorResolution self, IntensityData p_intensity_map)"""
        return _libBornAgainCore.IDetectorResolution_applyDetectorResolution(self, p_intensity_map)

    def clone(self):
        r"""clone(IDetectorResolution self) -> IDetectorResolution"""
        return _libBornAgainCore.IDetectorResolution_clone(self)

# Register IDetectorResolution in _libBornAgainCore:
_libBornAgainCore.IDetectorResolution_swigregister(IDetectorResolution)

class IResolutionFunction2D(libBornAgainBase.ICloneable, libBornAgainParam.INode):
    r"""Proxy of C++ IResolutionFunction2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IResolutionFunction2D

    def evaluateCDF(self, x, y):
        r"""evaluateCDF(IResolutionFunction2D self, double x, double y) -> double"""
        return _libBornAgainCore.IResolutionFunction2D_evaluateCDF(self, x, y)

    def clone(self):
        r"""clone(IResolutionFunction2D self) -> IResolutionFunction2D"""
        return _libBornAgainCore.IResolutionFunction2D_clone(self)

# Register IResolutionFunction2D in _libBornAgainCore:
_libBornAgainCore.IResolutionFunction2D_swigregister(IResolutionFunction2D)

class ResolutionFunction2DGaussian(IResolutionFunction2D):
    r"""Proxy of C++ ResolutionFunction2DGaussian class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sigma_x, sigma_y):
        r"""__init__(ResolutionFunction2DGaussian self, double sigma_x, double sigma_y) -> ResolutionFunction2DGaussian"""
        _libBornAgainCore.ResolutionFunction2DGaussian_swiginit(self, _libBornAgainCore.new_ResolutionFunction2DGaussian(sigma_x, sigma_y))

    def evaluateCDF(self, x, y):
        r"""evaluateCDF(ResolutionFunction2DGaussian self, double x, double y) -> double"""
        return _libBornAgainCore.ResolutionFunction2DGaussian_evaluateCDF(self, x, y)

    def clone(self):
        r"""clone(ResolutionFunction2DGaussian self) -> ResolutionFunction2DGaussian"""
        return _libBornAgainCore.ResolutionFunction2DGaussian_clone(self)

    def accept(self, visitor):
        r"""accept(ResolutionFunction2DGaussian self, INodeVisitor * visitor)"""
        return _libBornAgainCore.ResolutionFunction2DGaussian_accept(self, visitor)

    def getSigmaX(self):
        r"""getSigmaX(ResolutionFunction2DGaussian self) -> double"""
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaX(self)

    def getSigmaY(self):
        r"""getSigmaY(ResolutionFunction2DGaussian self) -> double"""
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaY(self)
    __swig_destroy__ = _libBornAgainCore.delete_ResolutionFunction2DGaussian

# Register ResolutionFunction2DGaussian in _libBornAgainCore:
_libBornAgainCore.ResolutionFunction2DGaussian_swigregister(ResolutionFunction2DGaussian)

class ScanResolution(libBornAgainBase.ICloneable):
    r"""Proxy of C++ ScanResolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ScanResolution

    @staticmethod
    def scanRelativeResolution(*args):
        r"""
        scanRelativeResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
        scanRelativeResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
        """
        return _libBornAgainCore.ScanResolution_scanRelativeResolution(*args)

    @staticmethod
    def scanAbsoluteResolution(*args):
        r"""
        scanAbsoluteResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
        scanAbsoluteResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
        """
        return _libBornAgainCore.ScanResolution_scanAbsoluteResolution(*args)

# Register ScanResolution in _libBornAgainCore:
_libBornAgainCore.ScanResolution_swigregister(ScanResolution)

def ScanResolution_scanRelativeResolution(*args):
    r"""
    ScanResolution_scanRelativeResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
    ScanResolution_scanRelativeResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
    """
    return _libBornAgainCore.ScanResolution_scanRelativeResolution(*args)

def ScanResolution_scanAbsoluteResolution(*args):
    r"""
    ScanResolution_scanAbsoluteResolution(RangedDistribution const & distr, double stddev) -> ScanResolution
    ScanResolution_scanAbsoluteResolution(RangedDistribution const & distr, vdouble1d_t stddevs) -> ScanResolution
    """
    return _libBornAgainCore.ScanResolution_scanAbsoluteResolution(*args)

class IHistogram(object):
    r"""Proxy of C++ IHistogram class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    INTEGRAL = _libBornAgainCore.IHistogram_INTEGRAL
    
    AVERAGE = _libBornAgainCore.IHistogram_AVERAGE
    
    STANDARD_ERROR = _libBornAgainCore.IHistogram_STANDARD_ERROR
    
    NENTRIES = _libBornAgainCore.IHistogram_NENTRIES
    
    __swig_destroy__ = _libBornAgainCore.delete_IHistogram

    def clone(self):
        r"""clone(IHistogram self) -> IHistogram"""
        return _libBornAgainCore.IHistogram_clone(self)

    def getRank(self):
        r"""getRank(IHistogram self) -> size_t"""
        return _libBornAgainCore.IHistogram_getRank(self)

    def getTotalNumberOfBins(self):
        r"""getTotalNumberOfBins(IHistogram self) -> size_t"""
        return _libBornAgainCore.IHistogram_getTotalNumberOfBins(self)

    def getXaxis(self):
        r"""getXaxis(IHistogram self) -> IAxis"""
        return _libBornAgainCore.IHistogram_getXaxis(self)

    def getYaxis(self):
        r"""getYaxis(IHistogram self) -> IAxis"""
        return _libBornAgainCore.IHistogram_getYaxis(self)

    def getXmin(self):
        r"""getXmin(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_getXmin(self)

    def getXmax(self):
        r"""getXmax(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_getXmax(self)

    def getNbinsX(self):
        r"""getNbinsX(IHistogram self) -> size_t"""
        return _libBornAgainCore.IHistogram_getNbinsX(self)

    def getYmin(self):
        r"""getYmin(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_getYmin(self)

    def getYmax(self):
        r"""getYmax(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_getYmax(self)

    def getNbinsY(self):
        r"""getNbinsY(IHistogram self) -> size_t"""
        return _libBornAgainCore.IHistogram_getNbinsY(self)

    def getGlobalBin(self, binx, biny=0):
        r"""getGlobalBin(IHistogram self, size_t binx, size_t biny=0) -> size_t"""
        return _libBornAgainCore.IHistogram_getGlobalBin(self, binx, biny)

    def findGlobalBin(self, x, y):
        r"""findGlobalBin(IHistogram self, double x, double y) -> size_t"""
        return _libBornAgainCore.IHistogram_findGlobalBin(self, x, y)

    def getXaxisIndex(self, i):
        r"""getXaxisIndex(IHistogram self, size_t i) -> size_t"""
        return _libBornAgainCore.IHistogram_getXaxisIndex(self, i)

    def getYaxisIndex(self, i):
        r"""getYaxisIndex(IHistogram self, size_t i) -> size_t"""
        return _libBornAgainCore.IHistogram_getYaxisIndex(self, i)

    def getXaxisValue(self, i):
        r"""getXaxisValue(IHistogram self, size_t i) -> double"""
        return _libBornAgainCore.IHistogram_getXaxisValue(self, i)

    def getYaxisValue(self, i):
        r"""getYaxisValue(IHistogram self, size_t i) -> double"""
        return _libBornAgainCore.IHistogram_getYaxisValue(self, i)

    def getData(self, *args):
        r"""
        getData(IHistogram self) -> OutputData< CumulativeValue > const
        getData(IHistogram self) -> OutputData< CumulativeValue > &
        """
        return _libBornAgainCore.IHistogram_getData(self, *args)

    def getBinContent(self, *args):
        r"""
        getBinContent(IHistogram self, size_t i) -> double
        getBinContent(IHistogram self, size_t binx, size_t biny) -> double
        """
        return _libBornAgainCore.IHistogram_getBinContent(self, *args)

    def setBinContent(self, i, value):
        r"""setBinContent(IHistogram self, size_t i, double value)"""
        return _libBornAgainCore.IHistogram_setBinContent(self, i, value)

    def addBinContent(self, i, value):
        r"""addBinContent(IHistogram self, size_t i, double value)"""
        return _libBornAgainCore.IHistogram_addBinContent(self, i, value)

    def getBinError(self, *args):
        r"""
        getBinError(IHistogram self, size_t i) -> double
        getBinError(IHistogram self, size_t binx, size_t biny) -> double
        """
        return _libBornAgainCore.IHistogram_getBinError(self, *args)

    def getBinAverage(self, *args):
        r"""
        getBinAverage(IHistogram self, size_t i) -> double
        getBinAverage(IHistogram self, size_t binx, size_t biny) -> double
        """
        return _libBornAgainCore.IHistogram_getBinAverage(self, *args)

    def getBinNumberOfEntries(self, *args):
        r"""
        getBinNumberOfEntries(IHistogram self, size_t i) -> int
        getBinNumberOfEntries(IHistogram self, size_t binx, size_t biny) -> int
        """
        return _libBornAgainCore.IHistogram_getBinNumberOfEntries(self, *args)

    def getMaximum(self):
        r"""getMaximum(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_getMaximum(self)

    def getMaximumBinIndex(self):
        r"""getMaximumBinIndex(IHistogram self) -> size_t"""
        return _libBornAgainCore.IHistogram_getMaximumBinIndex(self)

    def getMinimum(self):
        r"""getMinimum(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_getMinimum(self)

    def getMinimumBinIndex(self):
        r"""getMinimumBinIndex(IHistogram self) -> size_t"""
        return _libBornAgainCore.IHistogram_getMinimumBinIndex(self)

    def scale(self, value):
        r"""scale(IHistogram self, double value)"""
        return _libBornAgainCore.IHistogram_scale(self, value)

    def integral(self):
        r"""integral(IHistogram self) -> double"""
        return _libBornAgainCore.IHistogram_integral(self)

    def array(self, *args):
        r"""array(IHistogram self, IHistogram::DataType dataType=DataType::INTEGRAL) -> PyObject"""
        return _libBornAgainCore.IHistogram_array(self, *args)

    def getArrayObsolete(self, *args):
        r"""getArrayObsolete(IHistogram self, IHistogram::DataType dataType=DataType::INTEGRAL) -> PyObject"""
        return _libBornAgainCore.IHistogram_getArrayObsolete(self, *args)

    def reset(self):
        r"""reset(IHistogram self)"""
        return _libBornAgainCore.IHistogram_reset(self)

    @staticmethod
    def createHistogram(source):
        r"""createHistogram(IntensityData source) -> IHistogram"""
        return _libBornAgainCore.IHistogram_createHistogram(source)

    @staticmethod
    def createFrom(*args):
        r"""
        createFrom(std::string const & filename) -> IHistogram
        createFrom(vdouble2d_t data) -> IHistogram
        """
        return _libBornAgainCore.IHistogram_createFrom(*args)

    def createOutputData(self, *args):
        r"""createOutputData(IHistogram self, IHistogram::DataType dataType=DataType::INTEGRAL) -> IntensityData"""
        return _libBornAgainCore.IHistogram_createOutputData(self, *args)

    def hasSameShape(self, other):
        r"""hasSameShape(IHistogram self, IHistogram other) -> bool"""
        return _libBornAgainCore.IHistogram_hasSameShape(self, other)

    def hasSameDimensions(self, other):
        r"""hasSameDimensions(IHistogram self, IHistogram other) -> bool"""
        return _libBornAgainCore.IHistogram_hasSameDimensions(self, other)

    def __iadd__(self, right):
        r"""__iadd__(IHistogram self, IHistogram right) -> IHistogram"""
        return _libBornAgainCore.IHistogram___iadd__(self, right)

    def relativeDifferenceHistogram(self, rhs):
        r"""relativeDifferenceHistogram(IHistogram self, IHistogram rhs) -> IHistogram"""
        return _libBornAgainCore.IHistogram_relativeDifferenceHistogram(self, rhs)

    def save(self, filename):
        r"""save(IHistogram self, std::string const & filename)"""
        return _libBornAgainCore.IHistogram_save(self, filename)

    def load(self, filename):
        r"""load(IHistogram self, std::string const & filename)"""
        return _libBornAgainCore.IHistogram_load(self, filename)

    @deprecated("Deprecated. Use array() instead.")
    def getArray(self):
        return self.getArrayObsolete()


# Register IHistogram in _libBornAgainCore:
_libBornAgainCore.IHistogram_swigregister(IHistogram)

def IHistogram_createHistogram(source):
    r"""IHistogram_createHistogram(IntensityData source) -> IHistogram"""
    return _libBornAgainCore.IHistogram_createHistogram(source)

def IHistogram_createFrom(*args):
    r"""
    IHistogram_createFrom(std::string const & filename) -> IHistogram
    IHistogram_createFrom(vdouble2d_t data) -> IHistogram
    """
    return _libBornAgainCore.IHistogram_createFrom(*args)

class IIntensityFunction(object):
    r"""Proxy of C++ IIntensityFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IIntensityFunction

    def clone(self):
        r"""clone(IIntensityFunction self) -> IIntensityFunction"""
        return _libBornAgainCore.IIntensityFunction_clone(self)

    def evaluate(self, value):
        r"""evaluate(IIntensityFunction self, double value) -> double"""
        return _libBornAgainCore.IIntensityFunction_evaluate(self, value)

# Register IIntensityFunction in _libBornAgainCore:
_libBornAgainCore.IIntensityFunction_swigregister(IIntensityFunction)

class IntensityFunctionLog(IIntensityFunction):
    r"""Proxy of C++ IntensityFunctionLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(IntensityFunctionLog self) -> IntensityFunctionLog"""
        return _libBornAgainCore.IntensityFunctionLog_clone(self)

    def evaluate(self, value):
        r"""evaluate(IntensityFunctionLog self, double value) -> double"""
        return _libBornAgainCore.IntensityFunctionLog_evaluate(self, value)

    def __init__(self):
        r"""__init__(IntensityFunctionLog self) -> IntensityFunctionLog"""
        _libBornAgainCore.IntensityFunctionLog_swiginit(self, _libBornAgainCore.new_IntensityFunctionLog())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityFunctionLog

# Register IntensityFunctionLog in _libBornAgainCore:
_libBornAgainCore.IntensityFunctionLog_swigregister(IntensityFunctionLog)

class IntensityFunctionSqrt(IIntensityFunction):
    r"""Proxy of C++ IntensityFunctionSqrt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(IntensityFunctionSqrt self) -> IntensityFunctionSqrt"""
        return _libBornAgainCore.IntensityFunctionSqrt_clone(self)

    def evaluate(self, value):
        r"""evaluate(IntensityFunctionSqrt self, double value) -> double"""
        return _libBornAgainCore.IntensityFunctionSqrt_evaluate(self, value)

    def __init__(self):
        r"""__init__(IntensityFunctionSqrt self) -> IntensityFunctionSqrt"""
        _libBornAgainCore.IntensityFunctionSqrt_swiginit(self, _libBornAgainCore.new_IntensityFunctionSqrt())
    __swig_destroy__ = _libBornAgainCore.delete_IntensityFunctionSqrt

# Register IntensityFunctionSqrt in _libBornAgainCore:
_libBornAgainCore.IntensityFunctionSqrt_swigregister(IntensityFunctionSqrt)

class Axes(object):
    r"""Proxy of C++ Axes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT = _libBornAgainCore.Axes_DEFAULT
    
    NBINS = _libBornAgainCore.Axes_NBINS
    
    RADIANS = _libBornAgainCore.Axes_RADIANS
    
    DEGREES = _libBornAgainCore.Axes_DEGREES
    
    MM = _libBornAgainCore.Axes_MM
    
    QSPACE = _libBornAgainCore.Axes_QSPACE
    
    QXQY = _libBornAgainCore.Axes_QXQY
    
    RQ4 = _libBornAgainCore.Axes_RQ4
    

    def __init__(self):
        r"""__init__(Axes self) -> Axes"""
        _libBornAgainCore.Axes_swiginit(self, _libBornAgainCore.new_Axes())
    __swig_destroy__ = _libBornAgainCore.delete_Axes

# Register Axes in _libBornAgainCore:
_libBornAgainCore.Axes_swigregister(Axes)

class IUnitConverter(libBornAgainBase.ICloneable):
    r"""Proxy of C++ IUnitConverter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IUnitConverter

    def clone(self):
        r"""clone(IUnitConverter self) -> IUnitConverter"""
        return _libBornAgainCore.IUnitConverter_clone(self)

    def dimension(self):
        r"""dimension(IUnitConverter self) -> size_t"""
        return _libBornAgainCore.IUnitConverter_dimension(self)

    def calculateMin(self, i_axis, units_type):
        r"""calculateMin(IUnitConverter self, size_t i_axis, Axes::Units units_type) -> double"""
        return _libBornAgainCore.IUnitConverter_calculateMin(self, i_axis, units_type)

    def calculateMax(self, i_axis, units_type):
        r"""calculateMax(IUnitConverter self, size_t i_axis, Axes::Units units_type) -> double"""
        return _libBornAgainCore.IUnitConverter_calculateMax(self, i_axis, units_type)

    def axisSize(self, i_axis):
        r"""axisSize(IUnitConverter self, size_t i_axis) -> size_t"""
        return _libBornAgainCore.IUnitConverter_axisSize(self, i_axis)

    def axisName(self, *args):
        r"""axisName(IUnitConverter self, size_t i_axis, Axes::Units units_type=Axes::Units::DEFAULT) -> std::string"""
        return _libBornAgainCore.IUnitConverter_axisName(self, *args)

    def availableUnits(self):
        r"""availableUnits(IUnitConverter self) -> std::vector< Axes::Units,std::allocator< Axes::Units > >"""
        return _libBornAgainCore.IUnitConverter_availableUnits(self)

    def defaultUnits(self):
        r"""defaultUnits(IUnitConverter self) -> Axes::Units"""
        return _libBornAgainCore.IUnitConverter_defaultUnits(self)

    def substituteDefaultUnits(self, units):
        r"""substituteDefaultUnits(IUnitConverter self, Axes::Units units) -> Axes::Units"""
        return _libBornAgainCore.IUnitConverter_substituteDefaultUnits(self, units)

# Register IUnitConverter in _libBornAgainCore:
_libBornAgainCore.IUnitConverter_swigregister(IUnitConverter)
axisUnitName = cvar.axisUnitName
axisUnitLabel = cvar.axisUnitLabel

class Histogram1D(IHistogram):
    r"""Proxy of C++ Histogram1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Histogram1D self, int nbinsx, double xlow, double xup) -> Histogram1D
        __init__(Histogram1D self, int nbinsx, vdouble1d_t xbins) -> Histogram1D
        __init__(Histogram1D self, IAxis axis) -> Histogram1D
        __init__(Histogram1D self, IntensityData data) -> Histogram1D
        """
        _libBornAgainCore.Histogram1D_swiginit(self, _libBornAgainCore.new_Histogram1D(*args))

    def clone(self):
        r"""clone(Histogram1D self) -> Histogram1D"""
        return _libBornAgainCore.Histogram1D_clone(self)

    def getRank(self):
        r"""getRank(Histogram1D self) -> size_t"""
        return _libBornAgainCore.Histogram1D_getRank(self)

    def fill(self, x, weight=1.0):
        r"""fill(Histogram1D self, double x, double weight=1.0) -> int"""
        return _libBornAgainCore.Histogram1D_fill(self, x, weight)

    def getBinCenters(self):
        r"""getBinCenters(Histogram1D self) -> vdouble1d_t"""
        return self.getBinCentersNumpy()

    def getBinValues(self):
        r"""getBinValues(Histogram1D self) -> vdouble1d_t"""
        return self.getBinValuesNumpy()

    def getBinErrors(self):
        r"""getBinErrors(Histogram1D self) -> vdouble1d_t"""
        return self.getBinErrorsNumpy()

    def getBinCentersNumpy(self):
        r"""getBinCentersNumpy(Histogram1D self) -> PyObject *"""
        return _libBornAgainCore.Histogram1D_getBinCentersNumpy(self)

    def getBinValuesNumpy(self):
        r"""getBinValuesNumpy(Histogram1D self) -> PyObject *"""
        return _libBornAgainCore.Histogram1D_getBinValuesNumpy(self)

    def getBinErrorsNumpy(self):
        r"""getBinErrorsNumpy(Histogram1D self) -> PyObject *"""
        return _libBornAgainCore.Histogram1D_getBinErrorsNumpy(self)

    def crop(self, xmin, xmax):
        r"""crop(Histogram1D self, double xmin, double xmax) -> Histogram1D"""
        return _libBornAgainCore.Histogram1D_crop(self, xmin, xmax)
    __swig_destroy__ = _libBornAgainCore.delete_Histogram1D

# Register Histogram1D in _libBornAgainCore:
_libBornAgainCore.Histogram1D_swigregister(Histogram1D)

class Histogram2D(IHistogram):
    r"""Proxy of C++ Histogram2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Histogram2D self, int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup) -> Histogram2D
        __init__(Histogram2D self, int nbinsx, vdouble1d_t xbins, int nbinsy, vdouble1d_t ybins) -> Histogram2D
        __init__(Histogram2D self, IAxis axis_x, IAxis axis_y) -> Histogram2D
        __init__(Histogram2D self, IntensityData data) -> Histogram2D
        __init__(Histogram2D self, vdouble2d_t data) -> Histogram2D
        """
        _libBornAgainCore.Histogram2D_swiginit(self, _libBornAgainCore.new_Histogram2D(*args))

    def clone(self):
        r"""clone(Histogram2D self) -> Histogram2D"""
        return _libBornAgainCore.Histogram2D_clone(self)

    def getRank(self):
        r"""getRank(Histogram2D self) -> size_t"""
        return _libBornAgainCore.Histogram2D_getRank(self)

    def fill(self, x, y, weight=1.0):
        r"""fill(Histogram2D self, double x, double y, double weight=1.0) -> int"""
        return _libBornAgainCore.Histogram2D_fill(self, x, y, weight)

    def projectionX(self, *args):
        r"""
        projectionX(Histogram2D self) -> Histogram1D
        projectionX(Histogram2D self, double yvalue) -> Histogram1D
        projectionX(Histogram2D self, double ylow, double yup) -> Histogram1D
        """
        return _libBornAgainCore.Histogram2D_projectionX(self, *args)

    def projectionY(self, *args):
        r"""
        projectionY(Histogram2D self) -> Histogram1D
        projectionY(Histogram2D self, double xvalue) -> Histogram1D
        projectionY(Histogram2D self, double xlow, double xup) -> Histogram1D
        """
        return _libBornAgainCore.Histogram2D_projectionY(self, *args)

    def crop(self, xmin, ymin, xmax, ymax):
        r"""crop(Histogram2D self, double xmin, double ymin, double xmax, double ymax) -> Histogram2D"""
        return _libBornAgainCore.Histogram2D_crop(self, xmin, ymin, xmax, ymax)

    def setContent(self, data):
        r"""setContent(Histogram2D self, vdouble2d_t data)"""
        return _libBornAgainCore.Histogram2D_setContent(self, data)

    def addContent(self, data):
        r"""addContent(Histogram2D self, vdouble2d_t data)"""
        return _libBornAgainCore.Histogram2D_addContent(self, data)
    __swig_destroy__ = _libBornAgainCore.delete_Histogram2D

# Register Histogram2D in _libBornAgainCore:
_libBornAgainCore.Histogram2D_swigregister(Histogram2D)


def RelativeDifference(dat, ref):
    r"""RelativeDifference(SimulationResult dat, SimulationResult ref) -> double"""
    return _libBornAgainCore.RelativeDifference(dat, ref)

def checkRelativeDifference(dat, ref, threshold):
    r"""checkRelativeDifference(IntensityData dat, IntensityData ref, double const threshold) -> bool"""
    return _libBornAgainCore.checkRelativeDifference(dat, ref, threshold)

def getRelativeDifference(*args):
    r"""
    getRelativeDifference(IntensityData dat, IntensityData ref) -> double
    getRelativeDifference(IHistogram dat, IHistogram ref) -> double
    """
    return _libBornAgainCore.getRelativeDifference(*args)

def coordinateToBinf(*args):
    r"""
    coordinateToBinf(double coordinate, IAxis axis) -> double
    coordinateToBinf(double & x, double & y, IntensityData data)
    """
    return _libBornAgainCore.coordinateToBinf(*args)

def coordinateFromBinf(*args):
    r"""
    coordinateFromBinf(double value, IAxis axis) -> double
    coordinateFromBinf(double & x, double & y, IntensityData data)
    """
    return _libBornAgainCore.coordinateFromBinf(*args)

def create2DArrayfromOutputData(data):
    r"""create2DArrayfromOutputData(IntensityData data) -> vdouble2d_t"""
    return _libBornAgainCore.create2DArrayfromOutputData(data)

def FT2DArray(signal):
    r"""FT2DArray(vdouble2d_t signal) -> vdouble2d_t"""
    return _libBornAgainCore.FT2DArray(signal)
class IChiSquaredModule(libBornAgainBase.ICloneable):
    r"""Proxy of C++ IChiSquaredModule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IChiSquaredModule

    def clone(self):
        r"""clone(IChiSquaredModule self) -> IChiSquaredModule"""
        return _libBornAgainCore.IChiSquaredModule_clone(self)

    def varianceFunction(self):
        r"""varianceFunction(IChiSquaredModule self) -> IVarianceFunction"""
        return _libBornAgainCore.IChiSquaredModule_varianceFunction(self)

    def setVarianceFunction(self, variance_function):
        r"""setVarianceFunction(IChiSquaredModule self, IVarianceFunction variance_function)"""
        return _libBornAgainCore.IChiSquaredModule_setVarianceFunction(self, variance_function)

    def getIntensityFunction(self):
        r"""getIntensityFunction(IChiSquaredModule self) -> IIntensityFunction"""
        return _libBornAgainCore.IChiSquaredModule_getIntensityFunction(self)

    def setIntensityFunction(self, intensity_function):
        r"""setIntensityFunction(IChiSquaredModule self, IIntensityFunction intensity_function)"""
        return _libBornAgainCore.IChiSquaredModule_setIntensityFunction(self, intensity_function)

    def residual(self, a, b, weight):
        r"""residual(IChiSquaredModule self, double a, double b, double weight) -> double"""
        return _libBornAgainCore.IChiSquaredModule_residual(self, a, b, weight)

# Register IChiSquaredModule in _libBornAgainCore:
_libBornAgainCore.IChiSquaredModule_swigregister(IChiSquaredModule)

class AngularSpecScan(object):
    r"""Proxy of C++ AngularSpecScan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AngularSpecScan self, double wl, vdouble1d_t inc_angle) -> AngularSpecScan
        __init__(AngularSpecScan self, double wl, IAxis inc_angle) -> AngularSpecScan
        __init__(AngularSpecScan self, double wl, int nbins, double alpha_i_min, double alpha_i_max) -> AngularSpecScan
        """
        _libBornAgainCore.AngularSpecScan_swiginit(self, _libBornAgainCore.new_AngularSpecScan(*args))
    __swig_destroy__ = _libBornAgainCore.delete_AngularSpecScan

    def clone(self):
        r"""clone(AngularSpecScan self) -> AngularSpecScan"""
        return _libBornAgainCore.AngularSpecScan_clone(self)

    def setFootprintFactor(self, f_factor):
        r"""setFootprintFactor(AngularSpecScan self, IFootprintFactor f_factor)"""
        return _libBornAgainCore.AngularSpecScan_setFootprintFactor(self, f_factor)

    def setWavelengthResolution(self, resolution):
        r"""setWavelengthResolution(AngularSpecScan self, ScanResolution resolution)"""
        return _libBornAgainCore.AngularSpecScan_setWavelengthResolution(self, resolution)

    def setRelativeWavelengthResolution(self, *args):
        r"""
        setRelativeWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, double rel_dev)
        setRelativeWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t rel_dev)
        """
        return _libBornAgainCore.AngularSpecScan_setRelativeWavelengthResolution(self, *args)

    def setAbsoluteWavelengthResolution(self, *args):
        r"""
        setAbsoluteWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, double std_dev)
        setAbsoluteWavelengthResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t std_dev)
        """
        return _libBornAgainCore.AngularSpecScan_setAbsoluteWavelengthResolution(self, *args)

    def setAngleResolution(self, resolution):
        r"""setAngleResolution(AngularSpecScan self, ScanResolution resolution)"""
        return _libBornAgainCore.AngularSpecScan_setAngleResolution(self, resolution)

    def setRelativeAngularResolution(self, *args):
        r"""
        setRelativeAngularResolution(AngularSpecScan self, RangedDistribution const & distr, double rel_dev)
        setRelativeAngularResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t rel_dev)
        """
        return _libBornAgainCore.AngularSpecScan_setRelativeAngularResolution(self, *args)

    def setAbsoluteAngularResolution(self, *args):
        r"""
        setAbsoluteAngularResolution(AngularSpecScan self, RangedDistribution const & distr, double std_dev)
        setAbsoluteAngularResolution(AngularSpecScan self, RangedDistribution const & distr, vdouble1d_t std_dev)
        """
        return _libBornAgainCore.AngularSpecScan_setAbsoluteAngularResolution(self, *args)

# Register AngularSpecScan in _libBornAgainCore:
_libBornAgainCore.AngularSpecScan_swigregister(AngularSpecScan)

class ChiSquaredModule(IChiSquaredModule):
    r"""Proxy of C++ ChiSquaredModule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChiSquaredModule self) -> ChiSquaredModule
        __init__(ChiSquaredModule self, ChiSquaredModule other) -> ChiSquaredModule
        """
        _libBornAgainCore.ChiSquaredModule_swiginit(self, _libBornAgainCore.new_ChiSquaredModule(*args))
    __swig_destroy__ = _libBornAgainCore.delete_ChiSquaredModule

    def clone(self):
        r"""clone(ChiSquaredModule self) -> ChiSquaredModule"""
        return _libBornAgainCore.ChiSquaredModule_clone(self)

    def residual(self, a, b, weight):
        r"""residual(ChiSquaredModule self, double a, double b, double weight) -> double"""
        return _libBornAgainCore.ChiSquaredModule_residual(self, a, b, weight)

# Register ChiSquaredModule in _libBornAgainCore:
_libBornAgainCore.ChiSquaredModule_swigregister(ChiSquaredModule)

class Instrument(libBornAgainParam.INode):
    r"""Proxy of C++ Instrument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Instrument self) -> Instrument
        __init__(Instrument self, Instrument other) -> Instrument
        """
        _libBornAgainCore.Instrument_swiginit(self, _libBornAgainCore.new_Instrument(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Instrument

    def accept(self, visitor):
        r"""accept(Instrument self, INodeVisitor * visitor)"""
        return _libBornAgainCore.Instrument_accept(self, visitor)

    def getBeam(self, *args):
        r"""
        getBeam(Instrument self) -> Beam
        getBeam(Instrument self) -> Beam
        """
        return _libBornAgainCore.Instrument_getBeam(self, *args)

    def setBeam(self, beam):
        r"""setBeam(Instrument self, Beam beam)"""
        return _libBornAgainCore.Instrument_setBeam(self, beam)

    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        r"""setBeamParameters(Instrument self, double wavelength, double alpha_i, double phi_i)"""
        return _libBornAgainCore.Instrument_setBeamParameters(self, wavelength, alpha_i, phi_i)

    def setBeamIntensity(self, intensity):
        r"""setBeamIntensity(Instrument self, double intensity)"""
        return _libBornAgainCore.Instrument_setBeamIntensity(self, intensity)

    def setBeamPolarization(self, bloch_vector):
        r"""setBeamPolarization(Instrument self, kvector_t bloch_vector)"""
        return _libBornAgainCore.Instrument_setBeamPolarization(self, bloch_vector)

    def getBeamIntensity(self):
        r"""getBeamIntensity(Instrument self) -> double"""
        return _libBornAgainCore.Instrument_getBeamIntensity(self)

    def getDetector(self):
        r"""getDetector(Instrument self) -> IDetector"""
        return _libBornAgainCore.Instrument_getDetector(self)

    def detector(self, *args):
        r"""
        detector(Instrument self) -> IDetector
        detector(Instrument self) -> IDetector
        """
        return _libBornAgainCore.Instrument_detector(self, *args)

    def detector2D(self, *args):
        r"""
        detector2D(Instrument self) -> IDetector2D
        detector2D(Instrument self) -> IDetector2D
        """
        return _libBornAgainCore.Instrument_detector2D(self, *args)

    def getDetectorMask(self):
        r"""getDetectorMask(Instrument self) -> DetectorMask"""
        return _libBornAgainCore.Instrument_getDetectorMask(self)

    def getDetectorAxis(self, index):
        r"""getDetectorAxis(Instrument self, size_t index) -> IAxis"""
        return _libBornAgainCore.Instrument_getDetectorAxis(self, index)

    def getDetectorDimension(self):
        r"""getDetectorDimension(Instrument self) -> size_t"""
        return _libBornAgainCore.Instrument_getDetectorDimension(self)

    def setDetector(self, detector):
        r"""setDetector(Instrument self, IDetector detector)"""
        return _libBornAgainCore.Instrument_setDetector(self, detector)

    def setDetectorResolutionFunction(self, p_resolution_function):
        r"""setDetectorResolutionFunction(Instrument self, IResolutionFunction2D p_resolution_function)"""
        return _libBornAgainCore.Instrument_setDetectorResolutionFunction(self, p_resolution_function)

    def removeDetectorResolution(self):
        r"""removeDetectorResolution(Instrument self)"""
        return _libBornAgainCore.Instrument_removeDetectorResolution(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        r"""setAnalyzerProperties(Instrument self, kvector_t direction, double efficiency, double total_transmission)"""
        return _libBornAgainCore.Instrument_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def applyDetectorResolution(self, p_intensity_map):
        r"""applyDetectorResolution(Instrument self, IntensityData p_intensity_map)"""
        return _libBornAgainCore.Instrument_applyDetectorResolution(self, p_intensity_map)

    def initDetector(self):
        r"""initDetector(Instrument self)"""
        return _libBornAgainCore.Instrument_initDetector(self)

    def getChildren(self):
        r"""getChildren(Instrument self) -> swig_dummy_type_const_inode_vector"""
        return _libBornAgainCore.Instrument_getChildren(self)

# Register Instrument in _libBornAgainCore:
_libBornAgainCore.Instrument_swigregister(Instrument)


def importArrayToOutputData(*args):
    r"""
    importArrayToOutputData(vdouble1d_t vec) -> IntensityData
    importArrayToOutputData(vdouble2d_t vec) -> IntensityData
    """
    return _libBornAgainCore.importArrayToOutputData(*args)
class QSpecScan(object):
    r"""Proxy of C++ QSpecScan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(QSpecScan self, vdouble1d_t qs_nm) -> QSpecScan
        __init__(QSpecScan self, IAxis qs_nm) -> QSpecScan
        __init__(QSpecScan self, int nbins, double qz_min, double qz_max) -> QSpecScan
        """
        _libBornAgainCore.QSpecScan_swiginit(self, _libBornAgainCore.new_QSpecScan(*args))
    __swig_destroy__ = _libBornAgainCore.delete_QSpecScan

    def clone(self):
        r"""clone(QSpecScan self) -> QSpecScan"""
        return _libBornAgainCore.QSpecScan_clone(self)

    def setQResolution(self, resolution):
        r"""setQResolution(QSpecScan self, ScanResolution resolution)"""
        return _libBornAgainCore.QSpecScan_setQResolution(self, resolution)

    def setRelativeQResolution(self, *args):
        r"""
        setRelativeQResolution(QSpecScan self, RangedDistribution const & distr, double rel_dev)
        setRelativeQResolution(QSpecScan self, RangedDistribution const & distr, vdouble1d_t rel_dev)
        """
        return _libBornAgainCore.QSpecScan_setRelativeQResolution(self, *args)

    def setAbsoluteQResolution(self, *args):
        r"""
        setAbsoluteQResolution(QSpecScan self, RangedDistribution const & distr, double std_dev)
        setAbsoluteQResolution(QSpecScan self, RangedDistribution const & distr, vdouble1d_t std_dev)
        """
        return _libBornAgainCore.QSpecScan_setAbsoluteQResolution(self, *args)

# Register QSpecScan in _libBornAgainCore:
_libBornAgainCore.QSpecScan_swigregister(QSpecScan)

class AxisInfo(object):
    r"""Proxy of C++ AxisInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_name = property(_libBornAgainCore.AxisInfo_m_name_get, _libBornAgainCore.AxisInfo_m_name_set, doc=r"""m_name : std::string""")
    m_min = property(_libBornAgainCore.AxisInfo_m_min_get, _libBornAgainCore.AxisInfo_m_min_set, doc=r"""m_min : double""")
    m_max = property(_libBornAgainCore.AxisInfo_m_max_get, _libBornAgainCore.AxisInfo_m_max_set, doc=r"""m_max : double""")

    def __init__(self):
        r"""__init__(AxisInfo self) -> AxisInfo"""
        _libBornAgainCore.AxisInfo_swiginit(self, _libBornAgainCore.new_AxisInfo())
    __swig_destroy__ = _libBornAgainCore.delete_AxisInfo

# Register AxisInfo in _libBornAgainCore:
_libBornAgainCore.AxisInfo_swigregister(AxisInfo)

class SimulationResult(object):
    r"""Proxy of C++ SimulationResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimulationResult self) -> SimulationResult
        __init__(SimulationResult self, IntensityData data, IUnitConverter unit_converter) -> SimulationResult
        __init__(SimulationResult self, SimulationResult other) -> SimulationResult
        """
        _libBornAgainCore.SimulationResult_swiginit(self, _libBornAgainCore.new_SimulationResult(*args))

    def histogram2d(self, *args):
        r"""histogram2d(SimulationResult self, Axes::Units units=Axes::Units::DEFAULT) -> Histogram2D"""
        return _libBornAgainCore.SimulationResult_histogram2d(self, *args)

    def axisInfo(self, *args):
        r"""axisInfo(SimulationResult self, Axes::Units units=Axes::Units::DEFAULT) -> swig_dummy_type_axisinfo_vector"""
        return _libBornAgainCore.SimulationResult_axisInfo(self, *args)

    def converter(self):
        r"""converter(SimulationResult self) -> IUnitConverter"""
        return _libBornAgainCore.SimulationResult_converter(self)

    def size(self):
        r"""size(SimulationResult self) -> size_t"""
        return _libBornAgainCore.SimulationResult_size(self)

    def empty(self):
        r"""empty(SimulationResult self) -> bool"""
        return _libBornAgainCore.SimulationResult_empty(self)

    def array(self, *args):
        r"""array(SimulationResult self, Axes::Units units=Axes::Units::DEFAULT) -> PyObject"""
        return _libBornAgainCore.SimulationResult_array(self, *args)

    def axis(self, *args):
        r"""
        axis(SimulationResult self, Axes::Units units=Axes::Units::DEFAULT) -> vdouble1d_t
        axis(SimulationResult self, size_t i_axis, Axes::Units units=Axes::Units::DEFAULT) -> vdouble1d_t
        """
        return _libBornAgainCore.SimulationResult_axis(self, *args)

    def __getitem__(self, i):
        r"""__getitem__(SimulationResult self, unsigned int i) -> double"""
        return _libBornAgainCore.SimulationResult___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""__setitem__(SimulationResult self, unsigned int i, double value) -> double"""
        return _libBornAgainCore.SimulationResult___setitem__(self, i, value)
    __swig_destroy__ = _libBornAgainCore.delete_SimulationResult

# Register SimulationResult in _libBornAgainCore:
_libBornAgainCore.SimulationResult_swigregister(SimulationResult)


def FindPeaks(*args):
    r"""FindPeaks(Histogram2D hist, double sigma=2, std::string const & option={}, double threshold=0.05) -> vector_pvacuum_double_t"""
    return _libBornAgainCore.FindPeaks(*args)
class IVarianceFunction(object):
    r"""Proxy of C++ IVarianceFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IVarianceFunction

    def clone(self):
        r"""clone(IVarianceFunction self) -> IVarianceFunction"""
        return _libBornAgainCore.IVarianceFunction_clone(self)

    def variance(self, real_value, simulated_value):
        r"""variance(IVarianceFunction self, double real_value, double simulated_value) -> double"""
        return _libBornAgainCore.IVarianceFunction_variance(self, real_value, simulated_value)

# Register IVarianceFunction in _libBornAgainCore:
_libBornAgainCore.IVarianceFunction_swigregister(IVarianceFunction)

class VarianceConstantFunction(IVarianceFunction):
    r"""Proxy of C++ VarianceConstantFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(VarianceConstantFunction self) -> VarianceConstantFunction"""
        return _libBornAgainCore.VarianceConstantFunction_clone(self)

    def variance(self, arg2, arg3):
        r"""variance(VarianceConstantFunction self, double arg2, double arg3) -> double"""
        return _libBornAgainCore.VarianceConstantFunction_variance(self, arg2, arg3)

    def __init__(self):
        r"""__init__(VarianceConstantFunction self) -> VarianceConstantFunction"""
        _libBornAgainCore.VarianceConstantFunction_swiginit(self, _libBornAgainCore.new_VarianceConstantFunction())
    __swig_destroy__ = _libBornAgainCore.delete_VarianceConstantFunction

# Register VarianceConstantFunction in _libBornAgainCore:
_libBornAgainCore.VarianceConstantFunction_swigregister(VarianceConstantFunction)

class VarianceSimFunction(IVarianceFunction):
    r"""Proxy of C++ VarianceSimFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsilon=1.0):
        r"""__init__(VarianceSimFunction self, double epsilon=1.0) -> VarianceSimFunction"""
        _libBornAgainCore.VarianceSimFunction_swiginit(self, _libBornAgainCore.new_VarianceSimFunction(epsilon))

    def clone(self):
        r"""clone(VarianceSimFunction self) -> VarianceSimFunction"""
        return _libBornAgainCore.VarianceSimFunction_clone(self)

    def variance(self, exp, sim):
        r"""variance(VarianceSimFunction self, double exp, double sim) -> double"""
        return _libBornAgainCore.VarianceSimFunction_variance(self, exp, sim)
    __swig_destroy__ = _libBornAgainCore.delete_VarianceSimFunction

# Register VarianceSimFunction in _libBornAgainCore:
_libBornAgainCore.VarianceSimFunction_swigregister(VarianceSimFunction)

class Beam(libBornAgainParam.INode):
    r"""Proxy of C++ Beam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Beam self, double wavelength, double alpha, double phi, double intensity) -> Beam
        __init__(Beam self, Beam other) -> Beam
        """
        _libBornAgainCore.Beam_swiginit(self, _libBornAgainCore.new_Beam(*args))
    __swig_destroy__ = _libBornAgainCore.delete_Beam

    @staticmethod
    def horizontalBeam():
        r"""horizontalBeam() -> Beam"""
        return _libBornAgainCore.Beam_horizontalBeam()

    def getCentralK(self):
        r"""getCentralK(Beam self) -> kvector_t"""
        return _libBornAgainCore.Beam_getCentralK(self)

    def setCentralK(self, wavelength, alpha_i, phi_i):
        r"""setCentralK(Beam self, double wavelength, double alpha_i, double phi_i)"""
        return _libBornAgainCore.Beam_setCentralK(self, wavelength, alpha_i, phi_i)

    def getIntensity(self):
        r"""getIntensity(Beam self) -> double"""
        return _libBornAgainCore.Beam_getIntensity(self)

    def setIntensity(self, intensity):
        r"""setIntensity(Beam self, double intensity)"""
        return _libBornAgainCore.Beam_setIntensity(self, intensity)

    def footprintFactor(self):
        r"""footprintFactor(Beam self) -> IFootprintFactor"""
        return _libBornAgainCore.Beam_footprintFactor(self)

    def setFootprintFactor(self, shape_factor):
        r"""setFootprintFactor(Beam self, IFootprintFactor shape_factor)"""
        return _libBornAgainCore.Beam_setFootprintFactor(self, shape_factor)

    def setWidthRatio(self, width_ratio):
        r"""setWidthRatio(Beam self, double width_ratio)"""
        return _libBornAgainCore.Beam_setWidthRatio(self, width_ratio)

    def setPolarization(self, bloch_vector):
        r"""setPolarization(Beam self, kvector_t bloch_vector)"""
        return _libBornAgainCore.Beam_setPolarization(self, bloch_vector)

    def getBlochVector(self):
        r"""getBlochVector(Beam self) -> kvector_t"""
        return _libBornAgainCore.Beam_getBlochVector(self)

    def getWavelength(self):
        r"""getWavelength(Beam self) -> double"""
        return _libBornAgainCore.Beam_getWavelength(self)

    def getAlpha(self):
        r"""getAlpha(Beam self) -> double"""
        return _libBornAgainCore.Beam_getAlpha(self)

    def getPhi(self):
        r"""getPhi(Beam self) -> double"""
        return _libBornAgainCore.Beam_getPhi(self)

    def accept(self, visitor):
        r"""accept(Beam self, INodeVisitor * visitor)"""
        return _libBornAgainCore.Beam_accept(self, visitor)

    def getChildren(self):
        r"""getChildren(Beam self) -> swig_dummy_type_const_inode_vector"""
        return _libBornAgainCore.Beam_getChildren(self)

# Register Beam in _libBornAgainCore:
_libBornAgainCore.Beam_swigregister(Beam)

def Beam_horizontalBeam():
    r"""Beam_horizontalBeam() -> Beam"""
    return _libBornAgainCore.Beam_horizontalBeam()

class IFootprintFactor(libBornAgainBase.ICloneable, libBornAgainParam.INode):
    r"""Proxy of C++ IFootprintFactor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IFootprintFactor

    def clone(self):
        r"""clone(IFootprintFactor self) -> IFootprintFactor"""
        return _libBornAgainCore.IFootprintFactor_clone(self)

    def setWidthRatio(self, width_ratio):
        r"""setWidthRatio(IFootprintFactor self, double width_ratio)"""
        return _libBornAgainCore.IFootprintFactor_setWidthRatio(self, width_ratio)

    def widthRatio(self):
        r"""widthRatio(IFootprintFactor self) -> double"""
        return _libBornAgainCore.IFootprintFactor_widthRatio(self)

    def calculate(self, alpha):
        r"""calculate(IFootprintFactor self, double alpha) -> double"""
        return _libBornAgainCore.IFootprintFactor_calculate(self, alpha)

    def _print(self):
        r"""_print(IFootprintFactor self) -> std::string"""
        return _libBornAgainCore.IFootprintFactor__print(self)

# Register IFootprintFactor in _libBornAgainCore:
_libBornAgainCore.IFootprintFactor_swigregister(IFootprintFactor)

class FootprintGauss(IFootprintFactor):
    r"""Proxy of C++ FootprintGauss class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FootprintGauss self, vdouble1d_t P) -> FootprintGauss
        __init__(FootprintGauss self, double width_ratio) -> FootprintGauss
        """
        _libBornAgainCore.FootprintGauss_swiginit(self, _libBornAgainCore.new_FootprintGauss(*args))

    def accept(self, visitor):
        r"""accept(FootprintGauss self, INodeVisitor * visitor)"""
        return _libBornAgainCore.FootprintGauss_accept(self, visitor)

    def clone(self):
        r"""clone(FootprintGauss self) -> FootprintGauss"""
        return _libBornAgainCore.FootprintGauss_clone(self)

    def calculate(self, alpha):
        r"""calculate(FootprintGauss self, double alpha) -> double"""
        return _libBornAgainCore.FootprintGauss_calculate(self, alpha)

    def _print(self):
        r"""_print(FootprintGauss self) -> std::string"""
        return _libBornAgainCore.FootprintGauss__print(self)
    __swig_destroy__ = _libBornAgainCore.delete_FootprintGauss

# Register FootprintGauss in _libBornAgainCore:
_libBornAgainCore.FootprintGauss_swigregister(FootprintGauss)

class FootprintSquare(IFootprintFactor):
    r"""Proxy of C++ FootprintSquare class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FootprintSquare self, vdouble1d_t P) -> FootprintSquare
        __init__(FootprintSquare self, double width_ratio) -> FootprintSquare
        """
        _libBornAgainCore.FootprintSquare_swiginit(self, _libBornAgainCore.new_FootprintSquare(*args))

    def accept(self, visitor):
        r"""accept(FootprintSquare self, INodeVisitor * visitor)"""
        return _libBornAgainCore.FootprintSquare_accept(self, visitor)

    def clone(self):
        r"""clone(FootprintSquare self) -> FootprintSquare"""
        return _libBornAgainCore.FootprintSquare_clone(self)

    def calculate(self, alpha):
        r"""calculate(FootprintSquare self, double alpha) -> double"""
        return _libBornAgainCore.FootprintSquare_calculate(self, alpha)

    def _print(self):
        r"""_print(FootprintSquare self) -> std::string"""
        return _libBornAgainCore.FootprintSquare__print(self)
    __swig_destroy__ = _libBornAgainCore.delete_FootprintSquare

# Register FootprintSquare in _libBornAgainCore:
_libBornAgainCore.FootprintSquare_swigregister(FootprintSquare)

class FitOptions(object):
    r"""Proxy of C++ FitOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FitOptions self) -> FitOptions"""
        _libBornAgainCore.FitOptions_swiginit(self, _libBornAgainCore.new_FitOptions())

    def derivEpsilon(self):
        r"""derivEpsilon(FitOptions self) -> double"""
        return _libBornAgainCore.FitOptions_derivEpsilon(self)

    def setDerivEpsilon(self, deriv_epsilon):
        r"""setDerivEpsilon(FitOptions self, double deriv_epsilon)"""
        return _libBornAgainCore.FitOptions_setDerivEpsilon(self, deriv_epsilon)

    def stepFactor(self):
        r"""stepFactor(FitOptions self) -> double"""
        return _libBornAgainCore.FitOptions_stepFactor(self)

    def setStepFactor(self, step_factor):
        r"""setStepFactor(FitOptions self, double step_factor)"""
        return _libBornAgainCore.FitOptions_setStepFactor(self, step_factor)
    __swig_destroy__ = _libBornAgainCore.delete_FitOptions

# Register FitOptions in _libBornAgainCore:
_libBornAgainCore.FitOptions_swigregister(FitOptions)

class IObserver(object):
    r"""


    Observer interface from Observer pattern.

    C++ includes: IObserver.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObserver

    def notify(self, subject):
        r"""
        notify(IObserver self, IObservable subject)
        virtual void IObserver::notify(IObservable *subject)=0

        method which is used by observable subject to notify change in status 

        """
        return _libBornAgainCore.IObserver_notify(self, subject)

# Register IObserver in _libBornAgainCore:
_libBornAgainCore.IObserver_swigregister(IObserver)

class IObservable(object):
    r"""


    Observable interface from Observer pattern

    C++ includes: IObserver.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObservable

    def attachObserver(self, obj):
        r"""
        attachObserver(IObservable self, IObservable::observer_t obj)
        void IObservable::attachObserver(observer_t obj)

        attach observer to the list of observers 

        """
        return _libBornAgainCore.IObservable_attachObserver(self, obj)

    def notifyObservers(self):
        r"""
        notifyObservers(IObservable self)
        void IObservable::notifyObservers()

        notify observers about change in status 

        """
        return _libBornAgainCore.IObservable_notifyObservers(self)

    def __init__(self):
        r"""
        __init__(IObservable self) -> IObservable


        Observable interface from Observer pattern

        C++ includes: IObserver.h

        """
        _libBornAgainCore.IObservable_swiginit(self, _libBornAgainCore.new_IObservable())

# Register IObservable in _libBornAgainCore:
_libBornAgainCore.IObservable_swigregister(IObservable)

class IterationInfo(object):
    r"""


    Stores fit iteration info to track fit flow from various observers. Used in context of  FitObjective.

    C++ includes: IterationInfo.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(IterationInfo self) -> IterationInfo
        IterationInfo::IterationInfo()

        """
        _libBornAgainCore.IterationInfo_swiginit(self, _libBornAgainCore.new_IterationInfo())

    def update(self, params, chi2):
        r"""
        update(IterationInfo self, Parameters params, double chi2)
        void IterationInfo::update(const Fit::Parameters &params, double chi2)

        """
        return _libBornAgainCore.IterationInfo_update(self, params, chi2)

    def iterationCount(self):
        r"""
        iterationCount(IterationInfo self) -> unsigned int
        unsigned IterationInfo::iterationCount() const

        Returns current number of minimizer iterations. 

        """
        return _libBornAgainCore.IterationInfo_iterationCount(self)

    def chi2(self):
        r"""
        chi2(IterationInfo self) -> double
        double IterationInfo::chi2() const

        """
        return _libBornAgainCore.IterationInfo_chi2(self)

    def parameters(self):
        r"""
        parameters(IterationInfo self) -> Parameters
        Fit::Parameters IterationInfo::parameters() const

        """
        return _libBornAgainCore.IterationInfo_parameters(self)

    def parameterMap(self):
        r"""
        parameterMap(IterationInfo self) -> map_string_double_t
        std::map< std::string, double > IterationInfo::parameterMap() const

        Returns map of fit parameter names and its current values. 

        """
        return _libBornAgainCore.IterationInfo_parameterMap(self)
    __swig_destroy__ = _libBornAgainCore.delete_IterationInfo

# Register IterationInfo in _libBornAgainCore:
_libBornAgainCore.IterationInfo_swigregister(IterationInfo)

class PyBuilderCallback(object):
    r"""


    Builds simulation object using a Python callable. Base class to wrap Python callable and pass it to C++. Used in swig interface file, intended to be overloaded from Python.

    C++ includes: PyFittingCallbacks.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(PyBuilderCallback self) -> PyBuilderCallback
        PyBuilderCallback::PyBuilderCallback()

        """
        if self.__class__ == PyBuilderCallback:
            _self = None
        else:
            _self = self
        _libBornAgainCore.PyBuilderCallback_swiginit(self, _libBornAgainCore.new_PyBuilderCallback(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_PyBuilderCallback

    def build_simulation(self, arg0):
        r"""
        build_simulation(PyBuilderCallback self, Parameters arg0) -> Simulation
        Simulation * PyBuilderCallback::build_simulation(Fit::Parameters)

        """
        return _libBornAgainCore.PyBuilderCallback_build_simulation(self, arg0)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_PyBuilderCallback(self)
        return weakref.proxy(self)

# Register PyBuilderCallback in _libBornAgainCore:
_libBornAgainCore.PyBuilderCallback_swigregister(PyBuilderCallback)

class PyObserverCallback(object):
    r"""


    Observer for  FitObjective based on Python callable. Base class to wrap Python callable and pass it to C++. Used in swig interface file, intended to be overloaded from Python.

    C++ includes: PyFittingCallbacks.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(PyObserverCallback self) -> PyObserverCallback
        PyObserverCallback::PyObserverCallback()

        """
        if self.__class__ == PyObserverCallback:
            _self = None
        else:
            _self = self
        _libBornAgainCore.PyObserverCallback_swiginit(self, _libBornAgainCore.new_PyObserverCallback(_self, ))
    __swig_destroy__ = _libBornAgainCore.delete_PyObserverCallback

    def update(self, arg0):
        r"""
        update(PyObserverCallback self, FitObjective arg0)
        void PyObserverCallback::update(const FitObjective &)

        """
        return _libBornAgainCore.PyObserverCallback_update(self, arg0)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_PyObserverCallback(self)
        return weakref.proxy(self)

# Register PyObserverCallback in _libBornAgainCore:
_libBornAgainCore.PyObserverCallback_swigregister(PyObserverCallback)

class Simulation(libBornAgainBase.ICloneable, libBornAgainParam.INode):
    r"""


    Pure virtual base class of OffSpecularSimulation,  GISASSimulation and  SpecularSimulation. Holds the common infrastructure to run a simulation: multithreading, batch processing, weighting over parameter distributions, ...

    C++ includes: Simulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation

    def clone(self):
        r"""
        clone(Simulation self) -> Simulation
        virtual Simulation* Simulation::clone() const =0

        """
        return _libBornAgainCore.Simulation_clone(self)

    def prepareSimulation(self):
        r"""
        prepareSimulation(Simulation self)
        void Simulation::prepareSimulation()

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.Simulation_prepareSimulation(self)

    def runSimulation(self):
        r"""
        runSimulation(Simulation self)
        void Simulation::runSimulation()

        Run a simulation, possibly averaged over parameter distributions.

        Run simulation with possible averaging over parameter distributions. 

        """
        return _libBornAgainCore.Simulation_runSimulation(self)

    def runMPISimulation(self):
        r"""
        runMPISimulation(Simulation self)
        void Simulation::runMPISimulation()

        Run a simulation in a MPI environment. 

        """
        return _libBornAgainCore.Simulation_runMPISimulation(self)

    def setInstrument(self, instrument):
        r"""
        setInstrument(Simulation self, Instrument instrument)
        void Simulation::setInstrument(const Instrument &instrument)

        """
        return _libBornAgainCore.Simulation_setInstrument(self, instrument)

    def getInstrument(self, *args):
        r"""
        getInstrument(Simulation self) -> Instrument
        getInstrument(Simulation self) -> Instrument
        Instrument& Simulation::getInstrument()

        """
        return _libBornAgainCore.Simulation_getInstrument(self, *args)

    def setBeamIntensity(self, intensity):
        r"""
        setBeamIntensity(Simulation self, double intensity)
        void Simulation::setBeamIntensity(double intensity)

        """
        return _libBornAgainCore.Simulation_setBeamIntensity(self, intensity)

    def getBeamIntensity(self):
        r"""
        getBeamIntensity(Simulation self) -> double
        double Simulation::getBeamIntensity() const

        """
        return _libBornAgainCore.Simulation_getBeamIntensity(self)

    def setBeamPolarization(self, bloch_vector):
        r"""
        setBeamPolarization(Simulation self, kvector_t bloch_vector)
        void Simulation::setBeamPolarization(const kvector_t bloch_vector)

        Sets the beam polarization according to the given Bloch vector. 

        """
        return _libBornAgainCore.Simulation_setBeamPolarization(self, bloch_vector)

    def setDetectorResolutionFunction(self, resolution_function):
        r"""
        setDetectorResolutionFunction(Simulation self, IResolutionFunction2D resolution_function)
        void Simulation::setDetectorResolutionFunction(const IResolutionFunction2D &resolution_function)

        """
        return _libBornAgainCore.Simulation_setDetectorResolutionFunction(self, resolution_function)

    def removeDetectorResolutionFunction(self):
        r"""
        removeDetectorResolutionFunction(Simulation self)
        void Simulation::removeDetectorResolutionFunction()

        """
        return _libBornAgainCore.Simulation_removeDetectorResolutionFunction(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission):
        r"""
        setAnalyzerProperties(Simulation self, kvector_t direction, double efficiency, double total_transmission)
        void Simulation::setAnalyzerProperties(const kvector_t direction, double efficiency, double total_transmission)

        Sets the polarization analyzer characteristics of the detector. 

        """
        return _libBornAgainCore.Simulation_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def setSample(self, sample):
        r"""
        setSample(Simulation self, MultiLayer const & sample)
        void Simulation::setSample(const MultiLayer &sample)

        The MultiLayer object will not be owned by the  Simulation object. 

        """
        return _libBornAgainCore.Simulation_setSample(self, sample)

    def sample(self):
        r"""
        sample(Simulation self) -> MultiLayer const *
        const MultiLayer * Simulation::sample() const

        """
        return _libBornAgainCore.Simulation_sample(self)

    def setSampleBuilderCpp(self, sample_builder):
        r"""
        setSampleBuilderCpp(Simulation self, std::shared_ptr< ISampleBuilder > const & sample_builder)
        void Simulation::setSampleBuilder(const std::shared_ptr< ISampleBuilder > &sample_builder)

        """
        return _libBornAgainCore.Simulation_setSampleBuilderCpp(self, sample_builder)

    def setBackground(self, bg):
        r"""
        setBackground(Simulation self, IBackground bg)
        void Simulation::setBackground(const IBackground &bg)

        """
        return _libBornAgainCore.Simulation_setBackground(self, bg)

    def background(self):
        r"""
        background(Simulation self) -> IBackground
        const IBackground* Simulation::background() const

        """
        return _libBornAgainCore.Simulation_background(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(Simulation self) -> size_t
        virtual size_t Simulation::intensityMapSize() const =0

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.Simulation_intensityMapSize(self)

    def result(self):
        r"""
        result(Simulation self) -> SimulationResult
        virtual SimulationResult Simulation::result() const =0

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.Simulation_result(self)

    def addParameterDistribution(self, *args):
        r"""
        addParameterDistribution(Simulation self, std::string const & param_name, IDistribution1D const & distribution, size_t nbr_samples, double sigma_factor=0.0, RealLimits limits=RealLimits())
        addParameterDistribution(Simulation self, ParameterDistribution par_distr)
        void Simulation::addParameterDistribution(const ParameterDistribution &par_distr)

        """
        return _libBornAgainCore.Simulation_addParameterDistribution(self, *args)

    def getDistributionHandler(self):
        r"""
        getDistributionHandler(Simulation self) -> DistributionHandler const &
        const DistributionHandler& Simulation::getDistributionHandler() const

        """
        return _libBornAgainCore.Simulation_getDistributionHandler(self)

    def setOptions(self, options):
        r"""
        setOptions(Simulation self, SimulationOptions const & options)
        void Simulation::setOptions(const SimulationOptions &options)

        """
        return _libBornAgainCore.Simulation_setOptions(self, options)

    def getOptions(self, *args):
        r"""
        getOptions(Simulation self) -> SimulationOptions const
        getOptions(Simulation self) -> SimulationOptions &
        SimulationOptions& Simulation::getOptions()

        """
        return _libBornAgainCore.Simulation_getOptions(self, *args)

    def subscribe(self, inform):
        r"""
        subscribe(Simulation self, ProgressHandler::Callback_t inform)
        void Simulation::subscribe(ProgressHandler::Callback_t inform)

        """
        return _libBornAgainCore.Simulation_subscribe(self, inform)

    def setTerminalProgressMonitor(self):
        r"""
        setTerminalProgressMonitor(Simulation self)
        void Simulation::setTerminalProgressMonitor()

        Initializes a progress monitor that prints to stdout. 

        """
        return _libBornAgainCore.Simulation_setTerminalProgressMonitor(self)

    def getChildren(self):
        r"""
        getChildren(Simulation self) -> swig_dummy_type_const_inode_vector
        std::vector< const INode * > Simulation::getChildren() const

        """
        return _libBornAgainCore.Simulation_getChildren(self)

    def convertData(self, data, put_masked_areas_to_zero=True):
        r"""
        convertData(Simulation self, IntensityData data, bool put_masked_areas_to_zero=True) -> SimulationResult
        SimulationResult Simulation::convertData(const OutputData< double > &data, bool put_masked_areas_to_zero=true)

        Convert user data to SimulationResult object for later drawing in various axes units. User data will be cropped to the ROI defined in the simulation, amplitudes in areas corresponding to the masked areas of the detector will be set to zero. 

        """
        return _libBornAgainCore.Simulation_convertData(self, data, put_masked_areas_to_zero)

    def setSampleBuilder(self, ptr):
        self.samplebuilder = ptr
        self.setSampleBuilderCpp(ptr)


# Register Simulation in _libBornAgainCore:
_libBornAgainCore.Simulation_swigregister(Simulation)

class Simulation2D(Simulation):
    r"""


    Pure virtual base class of OffSpecularSimulation and  GISASSimulation. Holds the common implementations for simulations with a 2D detector

    C++ includes: Simulation2D.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation2D

    def clone(self):
        r"""
        clone(Simulation2D self) -> Simulation2D
        Simulation2D* Simulation2D::clone() const override=0

        """
        return _libBornAgainCore.Simulation2D_clone(self)

    def prepareSimulation(self):
        r"""
        prepareSimulation(Simulation2D self)
        void Simulation2D::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.Simulation2D_prepareSimulation(self)

    def setDetectorParameters(self, n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max):
        r"""
        setDetectorParameters(Simulation2D self, size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max)
        void Simulation2D::setDetectorParameters(size_t n_phi, double phi_min, double phi_max, size_t n_alpha, double alpha_min, double alpha_max)

        Sets spherical detector parameters using angle ranges

        Parameters:
        -----------

        n_phi: 
        number of phi-axis bins

        phi_min: 
        low edge of first phi-bin

        phi_max: 
        upper edge of last phi-bin

        n_alpha: 
        number of alpha-axis bins

        alpha_min: 
        low edge of first alpha-bin

        alpha_max: 
        upper edge of last alpha-bin 

        """
        return _libBornAgainCore.Simulation2D_setDetectorParameters(self, n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max)

    def setDetector(self, detector):
        r"""
        setDetector(Simulation2D self, IDetector2D detector)
        void Simulation2D::setDetector(const IDetector2D &detector)

        Sets the detector (axes can be overwritten later) 

        """
        return _libBornAgainCore.Simulation2D_setDetector(self, detector)

    def removeMasks(self):
        r"""
        removeMasks(Simulation2D self)
        void Simulation2D::removeMasks()

        removes all masks from the detector 

        """
        return _libBornAgainCore.Simulation2D_removeMasks(self)

    def addMask(self, shape, mask_value=True):
        r"""
        addMask(Simulation2D self, IShape2D shape, bool mask_value=True)
        void Simulation2D::addMask(const IShape2D &shape, bool mask_value=true)

        Adds mask of given shape to the stack of detector masks. The mask value 'true' means that the channel will be excluded from the simulation. The mask which is added last has priority.

        Parameters:
        -----------

        shape: 
        The shape of mask (Rectangle, Polygon, Line, Ellipse)

        mask_value: 
        The value of mask 

        """
        return _libBornAgainCore.Simulation2D_addMask(self, shape, mask_value)

    def maskAll(self):
        r"""
        maskAll(Simulation2D self)
        void Simulation2D::maskAll()

        Put the mask for all detector channels (i.e. exclude whole detector from the analysis) 

        """
        return _libBornAgainCore.Simulation2D_maskAll(self)

    def setRegionOfInterest(self, xlow, ylow, xup, yup):
        r"""
        setRegionOfInterest(Simulation2D self, double xlow, double ylow, double xup, double yup)
        void Simulation2D::setRegionOfInterest(double xlow, double ylow, double xup, double yup)

        Sets rectangular region of interest with lower left and upper right corners defined. 

        """
        return _libBornAgainCore.Simulation2D_setRegionOfInterest(self, xlow, ylow, xup, yup)

# Register Simulation2D in _libBornAgainCore:
_libBornAgainCore.Simulation2D_swigregister(Simulation2D)

class GISASSimulation(Simulation2D):
    r"""


    Main class to run a Grazing-Incidence Small-Angle Scattering simulation.

    C++ includes: GISASSimulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(GISASSimulation self) -> GISASSimulation
        GISASSimulation::GISASSimulation()

        """
        _libBornAgainCore.GISASSimulation_swiginit(self, _libBornAgainCore.new_GISASSimulation())
    __swig_destroy__ = _libBornAgainCore.delete_GISASSimulation

    def clone(self):
        r"""
        clone(GISASSimulation self) -> GISASSimulation
        GISASSimulation* GISASSimulation::clone() const override

        """
        return _libBornAgainCore.GISASSimulation_clone(self)

    def accept(self, visitor):
        r"""
        accept(GISASSimulation self, INodeVisitor * visitor)
        void GISASSimulation::accept(INodeVisitor *visitor) const override

        """
        return _libBornAgainCore.GISASSimulation_accept(self, visitor)

    def prepareSimulation(self):
        r"""
        prepareSimulation(GISASSimulation self)
        void GISASSimulation::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.GISASSimulation_prepareSimulation(self)

    def result(self):
        r"""
        result(GISASSimulation self) -> SimulationResult
        SimulationResult GISASSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.GISASSimulation_result(self)

    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        r"""
        setBeamParameters(GISASSimulation self, double wavelength, double alpha_i, double phi_i)
        void GISASSimulation::setBeamParameters(double wavelength, double alpha_i, double phi_i)

        Sets beam parameters from here (forwarded to Instrument) 

        """
        return _libBornAgainCore.GISASSimulation_setBeamParameters(self, wavelength, alpha_i, phi_i)

    def intensityMapSize(self):
        r"""
        intensityMapSize(GISASSimulation self) -> size_t
        size_t GISASSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.GISASSimulation_intensityMapSize(self)

# Register GISASSimulation in _libBornAgainCore:
_libBornAgainCore.GISASSimulation_swigregister(GISASSimulation)

class DepthProbeSimulation(Simulation):
    r"""Proxy of C++ DepthProbeSimulation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(DepthProbeSimulation self) -> DepthProbeSimulation
        DepthProbeSimulation::DepthProbeSimulation()

        """
        _libBornAgainCore.DepthProbeSimulation_swiginit(self, _libBornAgainCore.new_DepthProbeSimulation())
    __swig_destroy__ = _libBornAgainCore.delete_DepthProbeSimulation

    def clone(self):
        r"""
        clone(DepthProbeSimulation self) -> DepthProbeSimulation
        DepthProbeSimulation * DepthProbeSimulation::clone() const override

        """
        return _libBornAgainCore.DepthProbeSimulation_clone(self)

    def accept(self, visitor):
        r"""
        accept(DepthProbeSimulation self, INodeVisitor * visitor)
        void DepthProbeSimulation::accept(INodeVisitor *visitor) const override final

        """
        return _libBornAgainCore.DepthProbeSimulation_accept(self, visitor)

    def result(self):
        r"""
        result(DepthProbeSimulation self) -> SimulationResult
        SimulationResult DepthProbeSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.DepthProbeSimulation_result(self)

    def setBeamParameters(self, _lambda, nbins, alpha_i_min, alpha_i_max, beam_shape=None):
        r"""
        setBeamParameters(DepthProbeSimulation self, double _lambda, int nbins, double alpha_i_min, double alpha_i_max, IFootprintFactor beam_shape=None)
        void DepthProbeSimulation::setBeamParameters(double lambda, int nbins, double alpha_i_min, double alpha_i_max, const IFootprintFactor *beam_shape=nullptr)

        Sets beam parameters with alpha_i of the beam defined in the range. 

        """
        return _libBornAgainCore.DepthProbeSimulation_setBeamParameters(self, _lambda, nbins, alpha_i_min, alpha_i_max, beam_shape)

    def setZSpan(self, n_bins, z_min, z_max):
        r"""
        setZSpan(DepthProbeSimulation self, size_t n_bins, double z_min, double z_max)
        void DepthProbeSimulation::setZSpan(size_t n_bins, double z_min, double z_max)

        Set z positions for intensity calculations. Negative z's correspond to the area under sample surface. The more negative z is, the deeper layer corresponds to it. 

        """
        return _libBornAgainCore.DepthProbeSimulation_setZSpan(self, n_bins, z_min, z_max)

    def getAlphaAxis(self):
        r"""
        getAlphaAxis(DepthProbeSimulation self) -> IAxis
        const IAxis * DepthProbeSimulation::getAlphaAxis() const

        Returns a pointer to incident angle axis. 

        """
        return _libBornAgainCore.DepthProbeSimulation_getAlphaAxis(self)

    def getZAxis(self):
        r"""
        getZAxis(DepthProbeSimulation self) -> IAxis
        const IAxis * DepthProbeSimulation::getZAxis() const

        Returns a pointer to z-position axis. 

        """
        return _libBornAgainCore.DepthProbeSimulation_getZAxis(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(DepthProbeSimulation self) -> size_t
        size_t DepthProbeSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.DepthProbeSimulation_intensityMapSize(self)

# Register DepthProbeSimulation in _libBornAgainCore:
_libBornAgainCore.DepthProbeSimulation_swigregister(DepthProbeSimulation)

class SpecularSimulation(Simulation):
    r"""


    Main class to run a specular simulation.

    C++ includes: SpecularSimulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SpecularSimulation self) -> SpecularSimulation
        SpecularSimulation::SpecularSimulation()

        """
        _libBornAgainCore.SpecularSimulation_swiginit(self, _libBornAgainCore.new_SpecularSimulation())
    __swig_destroy__ = _libBornAgainCore.delete_SpecularSimulation

    def clone(self):
        r"""
        clone(SpecularSimulation self) -> SpecularSimulation
        SpecularSimulation * SpecularSimulation::clone() const override

        """
        return _libBornAgainCore.SpecularSimulation_clone(self)

    def prepareSimulation(self):
        r"""
        prepareSimulation(SpecularSimulation self)
        void SpecularSimulation::prepareSimulation() override

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.SpecularSimulation_prepareSimulation(self)

    def accept(self, visitor):
        r"""
        accept(SpecularSimulation self, INodeVisitor * visitor)
        void SpecularSimulation::accept(INodeVisitor *visitor) const override final

        """
        return _libBornAgainCore.SpecularSimulation_accept(self, visitor)

    def result(self):
        r"""
        result(SpecularSimulation self) -> SimulationResult
        SimulationResult SpecularSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays. If simulation was not run, returns an array of proper size filled with zeros. 

        """
        return _libBornAgainCore.SpecularSimulation_result(self)

    def setScan(self, scan):
        r"""
        setScan(SpecularSimulation self, ISpecularScan const & scan)
        void SpecularSimulation::setScan(const ISpecularScan &scan)

        Sets chosen specular scan to the simulation. 

        """
        return _libBornAgainCore.SpecularSimulation_setScan(self, scan)

    def coordinateAxis(self):
        r"""
        coordinateAxis(SpecularSimulation self) -> IAxis
        const IAxis * SpecularSimulation::coordinateAxis() const

        Returns a pointer to coordinate axis. 

        """
        return _libBornAgainCore.SpecularSimulation_coordinateAxis(self)

    def footprintFactor(self):
        r"""
        footprintFactor(SpecularSimulation self) -> IFootprintFactor
        const IFootprintFactor * SpecularSimulation::footprintFactor() const

        Returns a pointer to footprint factor holder. 

        """
        return _libBornAgainCore.SpecularSimulation_footprintFactor(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(SpecularSimulation self) -> size_t
        size_t SpecularSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.SpecularSimulation_intensityMapSize(self)

    def setSampleBuilder(self, ptr):
        self.samplebuilder = ptr
        self.setSampleBuilderCpp(ptr)


# Register SpecularSimulation in _libBornAgainCore:
_libBornAgainCore.SpecularSimulation_swigregister(SpecularSimulation)

class OffSpecSimulation(Simulation2D):
    r"""


    Main class to run an off-specular simulation.

    C++ includes: OffSpecSimulation.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(OffSpecSimulation self) -> OffSpecSimulation
        OffSpecSimulation::OffSpecSimulation()

        """
        _libBornAgainCore.OffSpecSimulation_swiginit(self, _libBornAgainCore.new_OffSpecSimulation())
    __swig_destroy__ = _libBornAgainCore.delete_OffSpecSimulation

    def clone(self):
        r"""
        clone(OffSpecSimulation self) -> OffSpecSimulation
        OffSpecSimulation* OffSpecSimulation::clone() const override

        """
        return _libBornAgainCore.OffSpecSimulation_clone(self)

    def accept(self, visitor):
        r"""
        accept(OffSpecSimulation self, INodeVisitor * visitor)
        void OffSpecSimulation::accept(INodeVisitor *visitor) const final

        """
        return _libBornAgainCore.OffSpecSimulation_accept(self, visitor)

    def prepareSimulation(self):
        r"""
        prepareSimulation(OffSpecSimulation self)
        void OffSpecSimulation::prepareSimulation() final

        Put into a clean state for running a simulation. 

        """
        return _libBornAgainCore.OffSpecSimulation_prepareSimulation(self)

    def result(self):
        r"""
        result(OffSpecSimulation self) -> SimulationResult
        SimulationResult OffSpecSimulation::result() const override

        Returns the results of the simulation in a format that supports unit conversion and export to numpy arrays 

        """
        return _libBornAgainCore.OffSpecSimulation_result(self)

    def setBeamParameters(self, wavelength, alpha_axis, phi_i):
        r"""
        setBeamParameters(OffSpecSimulation self, double wavelength, IAxis alpha_axis, double phi_i)
        void OffSpecSimulation::setBeamParameters(double wavelength, const IAxis &alpha_axis, double phi_i)

        Sets beam parameters from here (forwarded to Instrument) 

        """
        return _libBornAgainCore.OffSpecSimulation_setBeamParameters(self, wavelength, alpha_axis, phi_i)

    def beamAxis(self):
        r"""
        beamAxis(OffSpecSimulation self) -> IAxis
        const IAxis * OffSpecSimulation::beamAxis() const

        Returns axis of the beam. 

        """
        return _libBornAgainCore.OffSpecSimulation_beamAxis(self)

    def intensityMapSize(self):
        r"""
        intensityMapSize(OffSpecSimulation self) -> size_t
        size_t OffSpecSimulation::intensityMapSize() const override

        Returns the total number of the intensity values in the simulation result. 

        """
        return _libBornAgainCore.OffSpecSimulation_intensityMapSize(self)

# Register OffSpecSimulation in _libBornAgainCore:
_libBornAgainCore.OffSpecSimulation_swigregister(OffSpecSimulation)

class IBackground(libBornAgainBase.ICloneable, libBornAgainParam.INode):
    r"""


    Interface for a simulating the background signal

    C++ includes: IBackground.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IBackground

    def clone(self):
        r"""
        clone(IBackground self) -> IBackground
        virtual IBackground* IBackground::clone() const =0

        """
        return _libBornAgainCore.IBackground_clone(self)

    def addBackGround(self, element):
        r"""
        addBackGround(IBackground self, double element) -> double
        virtual double IBackground::addBackGround(double element) const =0

        """
        return _libBornAgainCore.IBackground_addBackGround(self, element)

# Register IBackground in _libBornAgainCore:
_libBornAgainCore.IBackground_swigregister(IBackground)

class ConstantBackground(IBackground):
    r"""


    Class representing a constant background signal

    C++ includes: ConstantBackground.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstantBackground self, vdouble1d_t P) -> ConstantBackground
        __init__(ConstantBackground self, double background_value) -> ConstantBackground
        ConstantBackground::ConstantBackground(double background_value)

        """
        _libBornAgainCore.ConstantBackground_swiginit(self, _libBornAgainCore.new_ConstantBackground(*args))

    def clone(self):
        r"""
        clone(ConstantBackground self) -> ConstantBackground
        ConstantBackground * ConstantBackground::clone() const override final

        """
        return _libBornAgainCore.ConstantBackground_clone(self)

    def backgroundValue(self):
        r"""
        backgroundValue(ConstantBackground self) -> double
        double ConstantBackground::backgroundValue() const

        """
        return _libBornAgainCore.ConstantBackground_backgroundValue(self)

    def accept(self, visitor):
        r"""
        accept(ConstantBackground self, INodeVisitor * visitor)
        void ConstantBackground::accept(INodeVisitor *visitor) const override

        """
        return _libBornAgainCore.ConstantBackground_accept(self, visitor)

    def addBackGround(self, intensity):
        r"""
        addBackGround(ConstantBackground self, double intensity) -> double
        double ConstantBackground::addBackGround(double intensity) const override final

        """
        return _libBornAgainCore.ConstantBackground_addBackGround(self, intensity)
    __swig_destroy__ = _libBornAgainCore.delete_ConstantBackground

# Register ConstantBackground in _libBornAgainCore:
_libBornAgainCore.ConstantBackground_swigregister(ConstantBackground)

class PoissonNoiseBackground(IBackground):
    r"""


    Class representing Poisson noise on top of the scattered intensity

    C++ includes: PoissonNoiseBackground.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(PoissonNoiseBackground self) -> PoissonNoiseBackground
        PoissonNoiseBackground::PoissonNoiseBackground()

        """
        _libBornAgainCore.PoissonNoiseBackground_swiginit(self, _libBornAgainCore.new_PoissonNoiseBackground())

    def clone(self):
        r"""
        clone(PoissonNoiseBackground self) -> PoissonNoiseBackground
        PoissonNoiseBackground * PoissonNoiseBackground::clone() const override final

        """
        return _libBornAgainCore.PoissonNoiseBackground_clone(self)

    def accept(self, visitor):
        r"""
        accept(PoissonNoiseBackground self, INodeVisitor * visitor)
        void PoissonNoiseBackground::accept(INodeVisitor *visitor) const override

        """
        return _libBornAgainCore.PoissonNoiseBackground_accept(self, visitor)

    def addBackGround(self, intensity):
        r"""
        addBackGround(PoissonNoiseBackground self, double intensity) -> double
        double PoissonNoiseBackground::addBackGround(double intensity) const override final

        """
        return _libBornAgainCore.PoissonNoiseBackground_addBackGround(self, intensity)
    __swig_destroy__ = _libBornAgainCore.delete_PoissonNoiseBackground

# Register PoissonNoiseBackground in _libBornAgainCore:
_libBornAgainCore.PoissonNoiseBackground_swigregister(PoissonNoiseBackground)


def MaterialProfile_cpp(multilayer, n_points, z_min, z_max):
    r"""
    MaterialProfile_cpp(MultiLayer const & multilayer, int n_points, double z_min, double z_max) -> vector_complex_t
    std::vector<complex_t> MaterialProfile(const MultiLayer &multilayer, int n_points, double z_min, double z_max)

    Calculate average material profile for given multilayer 

    """
    return _libBornAgainCore.MaterialProfile_cpp(multilayer, n_points, z_min, z_max)

def DefaultMaterialProfileLimits(multilayer):
    r"""
    DefaultMaterialProfileLimits(MultiLayer const & multilayer) -> pvacuum_double_t
    std::pair<double, double> DefaultMaterialProfileLimits(const MultiLayer &multilayer)

    Get default z limits for generating a material profile. 

    """
    return _libBornAgainCore.DefaultMaterialProfileLimits(multilayer)

def GenerateZValues(n_points, z_min, z_max):
    r"""
    GenerateZValues(int n_points, double z_min, double z_max) -> vdouble1d_t
    std::vector<double> GenerateZValues(int n_points, double z_min, double z_max)

    Generate z values (equidistant) for use in MaterialProfile. 

    """
    return _libBornAgainCore.GenerateZValues(n_points, z_min, z_max)
class SimulationFactory(SimulationFactoryTemp):
    r"""


    Registry to create standard pre-defined simulations. Used in functional tests, performance measurements, etc.

    C++ includes: SimulationFactory.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SimulationFactory self) -> SimulationFactory
        SimulationFactory::SimulationFactory()

        """
        _libBornAgainCore.SimulationFactory_swiginit(self, _libBornAgainCore.new_SimulationFactory())
    __swig_destroy__ = _libBornAgainCore.delete_SimulationFactory

# Register SimulationFactory in _libBornAgainCore:
_libBornAgainCore.SimulationFactory_swigregister(SimulationFactory)


def ScanRelativeResolution(distribution, rel_dev):
    """
    Creates a scan resolution from the given distribution and
    relative deviation values (that is, the ratios of standard
    deviations and means).
    :param distribution: bornagain.RangedDistribution object
    :param rel_dev: either single-valued or a numpy array.
                    In the latter case should coinside in
                    size with later used mean values array.
    :return: bornagain.ScanResolution object
    """
    return ScanResolution_scanRelativeResolution(distribution, rel_dev)

def ScanAbsoluteResolution(distribution, std_dev):
    """
    Creates a scan resolution from the given distribution and
    standard deviation values.
    :param distribution: bornagain.RangedDistribution object
    :param std_dev: either single-valued or a numpy array.
                    In the latter case should coinside in
                    size with later used mean values array.
    :return: bornagain.ScanResolution object
    """
    return ScanResolution_scanAbsoluteResolution(distribution, std_dev)


class SimulationBuilderWrapper(PyBuilderCallback):
    def __init__(self, f):
        super(SimulationBuilderWrapper, self).__init__()
        self.f_ = f

    def create_par_dict(self, pars):
        """
        Convertion of ba.Parameters to Python dictionary
        """
        pars_dict = dict()
        for index, p in enumerate(pars):
            pars_dict[p.name()] = p.value
        return pars_dict

    def build_simulation(self, obj):
        simulation = self.f_(self.create_par_dict(obj))
        simulation.__disown__()
        return simulation




class ObserverCallbackWrapper(PyObserverCallback):
    def __init__(self, callback):
        super(ObserverCallbackWrapper, self).__init__()
        self.callback_ = callback

    def update(self, fit_objective):
        return self.callback_(fit_objective)



def MaterialProfile(multilayer, n_points=400, z_min=None, z_max=None):
    """
    Creates a material profile from the given multilayer. If no limits are given,
    it will provide sensible default values, considering the included particles and
    interface roughnesses.
    :param multilayer: bornagain.MultiLayer object
    :param n_points: number of points to generate
    :param z_min: starting value for z
    :param z_max: ending value for z
    :return: numpy arrays containing z positions and the complex material values in those positions
    """
    def_z_min, def_z_max = DefaultMaterialProfileLimits(multilayer)
    z_min = def_z_min if z_min is None else z_min
    z_max = def_z_max if z_max is None else z_max
    z_points = GenerateZValues(n_points, z_min, z_max)
    material_values = MaterialProfile_cpp(multilayer, n_points, z_min, z_max)
    return (z_points, material_values)


